; ModuleID = 'blob_simplify.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ident_t = type { i32, i32, i32, i32, i8* }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }

@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@firstrow = internal unnamed_addr global i1 false, align 4
@lastrow = internal unnamed_addr global i1 false, align 4
@firstcol = internal unnamed_addr global i1 false, align 4
@lastcol = internal unnamed_addr global i1 false, align 4
@str = private unnamed_addr constant [74 x i8] c"\0A\0A NAS Parallel Benchmarks 3.0 structured OpenMP C version - CG Benchmark\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c" Size: %10d\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c" Iterations: %5d\0A\00", align 1
@naa = internal unnamed_addr global i1 false, align 4
@nzz = internal unnamed_addr global i1 false, align 4
@tran = internal global double 0.000000e+00, align 8
@amult = internal unnamed_addr global double 0.000000e+00, align 8
@colidx = internal global [637001 x i32] zeroinitializer, align 16
@0 = private unnamed_addr global %struct.ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@v = internal global [7002 x double] zeroinitializer, align 16
@iv = internal global [14002 x i32] zeroinitializer, align 16
@str.51 = private unnamed_addr constant [44 x i8] c"Space for matrix elements exceeded in makea\00", align 1
@.str.41 = private unnamed_addr constant [22 x i8] c"nnza, nzmax = %d, %d\0A\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"iouter = %d\0A\00", align 1
@acol = internal unnamed_addr global [637001 x i32] zeroinitializer, align 16
@arow = internal unnamed_addr global [637001 x i32] zeroinitializer, align 16
@aelt = internal unnamed_addr global [637001 x double] zeroinitializer, align 16
@a = internal global [637001 x double] zeroinitializer, align 16
@rowstr = internal global [7002 x i32] zeroinitializer, align 16
@str.49 = private unnamed_addr constant [50 x i8] c"   iteration           ||r||                 zeta\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"    %5d       %20.14e%20.13e\0A\00", align 1
@str.46 = private unnamed_addr constant [21 x i8] c" Benchmark completed\00", align 1
@str.48 = private unnamed_addr constant [25 x i8] c" VERIFICATION SUCCESSFUL\00", align 1
@.str.15 = private unnamed_addr constant [21 x i8] c" Zeta is    %20.12e\0A\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c" Error is   %20.12e\0A\00", align 1
@str.47 = private unnamed_addr constant [21 x i8] c" VERIFICATION FAILED\00", align 1
@.str.18 = private unnamed_addr constant [30 x i8] c" Zeta                %20.12e\0A\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c" The correct zeta is %20.12e\0A\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"CG\00", align 1
@.str.23 = private unnamed_addr constant [25 x i8] c"          floating point\00", align 1
@.str.24 = private unnamed_addr constant [15 x i8] c"3.0 structured\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"12 Jan 2021\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"wllvm\00", align 1
@.str.27 = private unnamed_addr constant [30 x i8] c"~/nautilus/user/framework/nld\00", align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c"-I../common\00", align 1
@.str.30 = private unnamed_addr constant [33 x i8] c"-O3 -fopenmp -fPIC -mno-red-zone\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"randdp\00", align 1
@1 = private unnamed_addr global %struct.ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@x = internal global [7003 x double] zeroinitializer, align 16
@z = internal global [7003 x double] zeroinitializer, align 16
@.str.3 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@2 = private unnamed_addr global %struct.ident_t { i32 0, i32 18, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@p = internal global [7003 x double] zeroinitializer, align 16
@q = internal global [7003 x double] zeroinitializer, align 16
@r = internal global [7003 x double] zeroinitializer, align 16
@3 = private unnamed_addr global %struct.ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@4 = private unnamed_addr global %struct.ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@conj_grad.callcount = internal unnamed_addr global i32 0, align 4
@.str.1.3 = private unnamed_addr constant [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", align 1
@.str.2.4 = private unnamed_addr constant [46 x i8] c" Class           =                        %c\0A\00", align 1
@.str.3.5 = private unnamed_addr constant [37 x i8] c" Size            =             %12d\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c" Size            =              %3dx%3dx%3d\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c" Iterations      =             %12d\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c" Threads         =             %12d\0A\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c" Time in seconds =             %12.2f\0A\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c" Mop/s total     =             %12.2f\0A\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c" Operation type  = %24s\0A\00", align 1
@str.6 = private unnamed_addr constant [44 x i8] c" Verification    =             UNSUCCESSFUL\00", align 1
@str.23 = private unnamed_addr constant [44 x i8] c" Verification    =               SUCCESSFUL\00", align 1
@.str.12 = private unnamed_addr constant [35 x i8] c" Version         =           %12s\0A\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c" Compile date    =             %12s\0A\00", align 1
@str.22 = private unnamed_addr constant [19 x i8] c"\0A Compile options:\00", align 1
@.str.15.7 = private unnamed_addr constant [23 x i8] c"    CC           = %s\0A\00", align 1
@.str.16.8 = private unnamed_addr constant [23 x i8] c"    CLINK        = %s\0A\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"    C_LIB        = %s\0A\00", align 1
@.str.18.9 = private unnamed_addr constant [23 x i8] c"    C_INC        = %s\0A\00", align 1
@.str.19.10 = private unnamed_addr constant [23 x i8] c"    CFLAGS       = %s\0A\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"    CLINKFLAGS   = %s\0A\00", align 1
@.str.21 = private unnamed_addr constant [23 x i8] c"    RAND         = %s\0A\00", align 1
@elapsed = common local_unnamed_addr global [64 x double] zeroinitializer, align 16
@start = common local_unnamed_addr global [64 x double] zeroinitializer, align 16
@wtime_.sec = internal unnamed_addr global i32 -1, align 4
@__NAUT_SIGNATURE = local_unnamed_addr global [16 x i8] zeroinitializer, section ".naut_secure", align 16
@__gcc_personality_v0 = common local_unnamed_addr global i8* null, align 8
@str.24 = private unnamed_addr constant [28 x i8] c"Call to fake _Unwind_Resume\00", align 1
@str.3 = private unnamed_addr constant [24 x i8] c"Call to fake __unordtf2\00", align 1
@str.4 = private unnamed_addr constant [21 x i8] c"Call to fake __letf2\00", align 1
@__nk_func_table = common local_unnamed_addr global i8* (...)** null, align 8
@llvm.global.annotations = appending global [3 x { i8*, i8*, i8*, i32 }] [{ i8*, i8*, i8*, i32 } { i8* bitcast (void (i8*)* @kmem_sys_free to i8*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.25, i32 0, i32 0), i32 88 }, { i8*, i8*, i8*, i32 } { i8* bitcast (i8* (i64)* @_kmem_sys_malloc to i8*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.25, i32 0, i32 0), i32 93 }, { i8*, i8*, i8*, i32 } { i8* bitcast (void ()* @make_carat_pass_work to i8*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.25, i32 0, i32 0), i32 104 }], section "llvm.metadata"
@.str = private unnamed_addr constant [8 x i8] c"nocarat\00", section "llvm.metadata"
@.str.1.25 = private unnamed_addr constant [12 x i8] c"framework.c\00", section "llvm.metadata"
@llvm.used = appending global [3 x i8*] [i8* bitcast (i8* (i64)* @_kmem_sys_malloc to i8*), i8* bitcast (void (i8*)* @kmem_sys_free to i8*), i8* bitcast (void ()* @make_carat_pass_work to i8*)], section "llvm.metadata"

; Function Attrs: noredzone nounwind uwtable
define i32 @main(i32, i8** nocapture readnone) local_unnamed_addr #0 {
  %3 = alloca double*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca double*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #17
  store i32 1, i32* %11, align 4, !tbaa !3
  %16 = bitcast double* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #17
  %17 = bitcast double* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #17
  %18 = bitcast double* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #17
  store i1 true, i1* @firstrow, align 4
  store i1 true, i1* @lastrow, align 4
  store i1 true, i1* @firstcol, align 4
  store i1 true, i1* @lastcol, align 4
  %19 = tail call i32 @puts(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @str, i64 0, i64 0))
  %20 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 7000) #18
  %21 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 15) #18
  store i1 true, i1* @naa, align 4
  store i1 true, i1* @nzz, align 4
  store double 0x41B2B9B0A1000000, double* @tran, align 8, !tbaa !7
  store double 0x41D2309CE5400000, double* @amult, align 8, !tbaa !7
  %22 = tail call double @randlc(double* nonnull @tran, double 0x41D2309CE5400000) #19
  %23 = load i1, i1* @naa, align 4
  %24 = select i1 %23, i32 7000, i32 0
  %25 = load i1, i1* @nzz, align 4
  %26 = select i1 %25, i32 637000, i32 0
  %27 = load i1, i1* @firstrow, align 4
  %28 = zext i1 %27 to i32
  %29 = load i1, i1* @lastrow, align 4
  %30 = select i1 %29, i32 7000, i32 0
  %31 = load i1, i1* @firstcol, align 4
  %32 = zext i1 %31 to i32
  %33 = load i1, i1* @lastcol, align 4
  %34 = select i1 %33, i32 7000, i32 0
  %35 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35)
  %36 = bitcast i32** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36)
  store i32 %24, i32* %9, align 4, !tbaa !3
  store i32* getelementptr inbounds ([637001 x i32], [637001 x i32]* @colidx, i64 0, i64 0), i32** %10, align 8, !tbaa !9
  %37 = bitcast i32** %10 to i8*
  call void @nk_carat_instrument_escapes(i8* %37)
  %38 = sitofp i32 %24 to double
  %39 = fdiv double 1.000000e+00, %38
  %40 = tail call double @pow(double 1.000000e-01, double %39) #19
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**)* @.omp_outlined..39 to void (i32*, i32*, ...)*), i32* nonnull %9, i32** nonnull %10) #17
  %41 = load i32, i32* %9, align 4, !tbaa !3
  %42 = icmp slt i32 %41, 1
  br i1 %42, label %43, label %47

43:                                               ; preds = %195, %2
  %44 = phi i32 [ 0, %2 ], [ %189, %195 ]
  %45 = phi i32 [ %41, %2 ], [ %198, %195 ]
  %46 = icmp ult i32 %30, %28
  br i1 %46, label %223, label %200

47:                                               ; preds = %195, %2
  %48 = phi i32 [ %198, %195 ], [ %41, %2 ]
  %49 = phi i32 [ %189, %195 ], [ 0, %2 ]
  %50 = phi i32 [ %197, %195 ], [ 1, %2 ]
  %51 = phi double [ %196, %195 ], [ 1.000000e+00, %2 ]
  %52 = load i32*, i32** %10, align 8, !tbaa !9
  br label %53

53:                                               ; preds = %53, %47
  %54 = phi i32 [ 1, %47 ], [ %55, %53 ]
  %55 = shl nsw i32 %54, 1
  %56 = icmp slt i32 %55, %48
  br i1 %56, label %53, label %57

57:                                               ; preds = %53
  %58 = sext i32 %48 to i64
  %59 = getelementptr inbounds i32, i32* %52, i64 %58
  %60 = sitofp i32 %55 to double
  br label %61

61:                                               ; preds = %97, %57
  %62 = phi i32 [ 0, %57 ], [ %99, %97 ]
  %63 = phi i32 [ 0, %57 ], [ %98, %97 ]
  br label %64

64:                                               ; preds = %64, %61
  %65 = load double, double* @amult, align 8, !tbaa !7
  %66 = call double @randlc(double* nonnull @tran, double %65) #19
  %67 = load double, double* @amult, align 8, !tbaa !7
  %68 = call double @randlc(double* nonnull @tran, double %67) #19
  %69 = fmul double %68, %60
  %70 = fptosi double %69 to i32
  %71 = icmp sgt i32 %48, %70
  br i1 %71, label %83, label %64

72:                                               ; preds = %97
  %73 = icmp slt i32 %99, 1
  br i1 %73, label %139, label %74

74:                                               ; preds = %72
  %75 = add nuw i32 %99, 1
  %76 = zext i32 %75 to i64
  %77 = add nsw i64 %76, -1
  %78 = add nsw i64 %76, -2
  %79 = and i64 %77, 3
  %80 = icmp ult i64 %78, 3
  br i1 %80, label %126, label %81

81:                                               ; preds = %74
  %82 = sub nsw i64 %77, %79
  br label %101

83:                                               ; preds = %64
  %84 = add nsw i32 %70, 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %59, i64 %85
  %87 = load i32, i32* %86, align 4, !tbaa !3
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %97

89:                                               ; preds = %83
  store i32 1, i32* %86, align 4, !tbaa !3
  %90 = add nsw i32 %62, 1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32, i32* %52, i64 %91
  store i32 %84, i32* %92, align 4, !tbaa !3
  %93 = add nsw i32 %63, 1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [7002 x double], [7002 x double]* @v, i64 0, i64 %94
  store double %66, double* %95, align 8, !tbaa !7
  %96 = getelementptr inbounds [14002 x i32], [14002 x i32]* @iv, i64 0, i64 %94
  store i32 %84, i32* %96, align 4, !tbaa !3
  br label %97

97:                                               ; preds = %89, %83
  %98 = phi i32 [ %93, %89 ], [ %63, %83 ]
  %99 = phi i32 [ %90, %89 ], [ %62, %83 ]
  %100 = icmp slt i32 %98, 8
  br i1 %100, label %61, label %72

101:                                              ; preds = %101, %81
  %102 = phi i64 [ 1, %81 ], [ %123, %101 ]
  %103 = phi i64 [ %82, %81 ], [ %124, %101 ]
  %104 = getelementptr inbounds i32, i32* %52, i64 %102
  %105 = load i32, i32* %104, align 4, !tbaa !3
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %59, i64 %106
  store i32 0, i32* %107, align 4, !tbaa !3
  %108 = add nuw nsw i64 %102, 1
  %109 = getelementptr inbounds i32, i32* %52, i64 %108
  %110 = load i32, i32* %109, align 4, !tbaa !3
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %59, i64 %111
  store i32 0, i32* %112, align 4, !tbaa !3
  %113 = add nuw nsw i64 %102, 2
  %114 = getelementptr inbounds i32, i32* %52, i64 %113
  %115 = load i32, i32* %114, align 4, !tbaa !3
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i32, i32* %59, i64 %116
  store i32 0, i32* %117, align 4, !tbaa !3
  %118 = add nuw nsw i64 %102, 3
  %119 = getelementptr inbounds i32, i32* %52, i64 %118
  %120 = load i32, i32* %119, align 4, !tbaa !3
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %59, i64 %121
  store i32 0, i32* %122, align 4, !tbaa !3
  %123 = add nuw nsw i64 %102, 4
  %124 = add i64 %103, -4
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %101

126:                                              ; preds = %101, %74
  %127 = phi i64 [ 1, %74 ], [ %123, %101 ]
  %128 = icmp eq i64 %79, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %129, %126
  %130 = phi i64 [ %136, %129 ], [ %127, %126 ]
  %131 = phi i64 [ %137, %129 ], [ %79, %126 ]
  %132 = getelementptr inbounds i32, i32* %52, i64 %130
  %133 = load i32, i32* %132, align 4, !tbaa !3
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i32, i32* %59, i64 %134
  store i32 0, i32* %135, align 4, !tbaa !3
  %136 = add nuw nsw i64 %130, 1
  %137 = add i64 %131, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !11

139:                                              ; preds = %129, %126, %72
  %140 = load i32, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 1), align 4, !tbaa !3
  %141 = icmp eq i32 %140, %50
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 1), align 8, !tbaa !7
  br label %143

143:                                              ; preds = %142, %139
  %144 = phi i32 [ 1, %142 ], [ 0, %139 ]
  %145 = load i32, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 2), align 8, !tbaa !3
  %146 = icmp eq i32 %145, %50
  br i1 %146, label %451, label %452

147:                                              ; preds = %482
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 9), align 8, !tbaa !7
  store i32 %50, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 9), align 4, !tbaa !3
  br label %148

148:                                              ; preds = %482, %481, %147
  %149 = phi i64 [ 10, %147 ], [ 9, %482 ], [ 9, %481 ]
  br label %150

150:                                              ; preds = %192, %148
  %151 = phi i32 [ %194, %192 ], [ %140, %148 ]
  %152 = phi i64 [ %190, %192 ], [ 1, %148 ]
  %153 = phi i32 [ %189, %192 ], [ %49, %148 ]
  %154 = icmp slt i32 %151, %32
  %155 = icmp sgt i32 %151, %34
  %156 = or i1 %154, %155
  br i1 %156, label %188, label %157

157:                                              ; preds = %150
  %158 = getelementptr inbounds [7002 x double], [7002 x double]* @v, i64 0, i64 %152
  %159 = load double, double* %158, align 8, !tbaa !7
  %160 = fmul double %51, %159
  br label %161

161:                                              ; preds = %184, %157
  %162 = phi i64 [ %186, %184 ], [ 1, %157 ]
  %163 = phi i32 [ %185, %184 ], [ %153, %157 ]
  %164 = getelementptr inbounds [14002 x i32], [14002 x i32]* @iv, i64 0, i64 %162
  %165 = load i32, i32* %164, align 4, !tbaa !3
  %166 = icmp slt i32 %165, %28
  %167 = icmp sgt i32 %165, %30
  %168 = or i1 %166, %167
  br i1 %168, label %184, label %169

169:                                              ; preds = %161
  %170 = add nsw i32 %163, 1
  %171 = icmp slt i32 %163, %26
  br i1 %171, label %176, label %172

172:                                              ; preds = %169
  %173 = call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str.51, i64 0, i64 0)) #17
  %174 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.41, i64 0, i64 0), i32 %170, i32 %26) #19
  %175 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 %50) #19
  call void @exit(i32 1) #20
  unreachable

176:                                              ; preds = %169
  %177 = sext i32 %170 to i64
  %178 = getelementptr inbounds [637001 x i32], [637001 x i32]* @acol, i64 0, i64 %177
  store i32 %151, i32* %178, align 4, !tbaa !3
  %179 = getelementptr inbounds [637001 x i32], [637001 x i32]* @arow, i64 0, i64 %177
  store i32 %165, i32* %179, align 4, !tbaa !3
  %180 = getelementptr inbounds [7002 x double], [7002 x double]* @v, i64 0, i64 %162
  %181 = load double, double* %180, align 8, !tbaa !7
  %182 = fmul double %160, %181
  %183 = getelementptr inbounds [637001 x double], [637001 x double]* @aelt, i64 0, i64 %177
  store double %182, double* %183, align 8, !tbaa !7
  br label %184

184:                                              ; preds = %176, %161
  %185 = phi i32 [ %170, %176 ], [ %163, %161 ]
  %186 = add nuw nsw i64 %162, 1
  %187 = icmp eq i64 %186, %149
  br i1 %187, label %188, label %161

188:                                              ; preds = %184, %150
  %189 = phi i32 [ %153, %150 ], [ %185, %184 ]
  %190 = add nuw nsw i64 %152, 1
  %191 = icmp eq i64 %190, %149
  br i1 %191, label %195, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds [14002 x i32], [14002 x i32]* @iv, i64 0, i64 %190
  %194 = load i32, i32* %193, align 4, !tbaa !3
  br label %150

195:                                              ; preds = %188
  %196 = fmul double %40, %51
  %197 = add nuw nsw i32 %50, 1
  %198 = load i32, i32* %9, align 4, !tbaa !3
  %199 = icmp slt i32 %50, %198
  br i1 %199, label %47, label %43

200:                                              ; preds = %219, %43
  %201 = phi i32 [ %221, %219 ], [ %28, %43 ]
  %202 = phi i32 [ %220, %219 ], [ %44, %43 ]
  %203 = icmp ult i32 %201, %32
  %204 = icmp ugt i32 %201, %34
  %205 = or i1 %203, %204
  br i1 %205, label %219, label %206

206:                                              ; preds = %200
  %207 = add nsw i32 %202, 1
  %208 = icmp slt i32 %202, %26
  br i1 %208, label %214, label %209

209:                                              ; preds = %206
  %210 = add nsw i32 %201, %45
  %211 = call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str.51, i64 0, i64 0)) #17
  %212 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.41, i64 0, i64 0), i32 %207, i32 %26) #19
  %213 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0), i32 %210) #19
  call void @exit(i32 1) #20
  unreachable

214:                                              ; preds = %206
  %215 = sext i32 %207 to i64
  %216 = getelementptr inbounds [637001 x i32], [637001 x i32]* @acol, i64 0, i64 %215
  store i32 %201, i32* %216, align 4, !tbaa !3
  %217 = getelementptr inbounds [637001 x i32], [637001 x i32]* @arow, i64 0, i64 %215
  store i32 %201, i32* %217, align 4, !tbaa !3
  %218 = getelementptr inbounds [637001 x double], [637001 x double]* @aelt, i64 0, i64 %215
  store double -1.190000e+01, double* %218, align 8, !tbaa !7
  br label %219

219:                                              ; preds = %214, %200
  %220 = phi i32 [ %207, %214 ], [ %202, %200 ]
  %221 = add nuw nsw i32 %201, 1
  %222 = icmp ult i32 %201, %30
  br i1 %222, label %200, label %223

223:                                              ; preds = %219, %43
  %224 = phi i32 [ %44, %43 ], [ %220, %219 ]
  %225 = load i32*, i32** %10, align 8, !tbaa !9
  %226 = sext i32 %45 to i64
  %227 = getelementptr inbounds [14002 x i32], [14002 x i32]* @iv, i64 0, i64 %226
  %228 = bitcast double** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %228) #17
  %229 = bitcast i32** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %229) #17
  %230 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %230) #17
  %231 = bitcast double** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %231) #17
  %232 = bitcast i32** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %232) #17
  store double* getelementptr inbounds ([637001 x double], [637001 x double]* @a, i64 0, i64 0), double** %3, align 8, !tbaa !9
  %233 = bitcast double** %3 to i8*
  call void @nk_carat_instrument_escapes(i8* %233)
  store i32* getelementptr inbounds ([7002 x i32], [7002 x i32]* @rowstr, i64 0, i64 0), i32** %4, align 8, !tbaa !9
  %234 = bitcast i32** %4 to i8*
  call void @nk_carat_instrument_escapes(i8* %234)
  store i32 %45, i32* %5, align 4, !tbaa !3
  store double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 0), double** %6, align 8, !tbaa !9
  %235 = bitcast double** %6 to i8*
  call void @nk_carat_instrument_escapes(i8* %235)
  store i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 0), i32** %7, align 8, !tbaa !9
  %236 = bitcast i32** %7 to i8*
  call void @nk_carat_instrument_escapes(i8* %236)
  %237 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %237) #17
  %238 = xor i1 %27, true
  %239 = zext i1 %238 to i32
  %240 = or i32 %30, %239
  store i32 %240, i32* %8, align 4, !tbaa !3
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, i32**)* @.omp_outlined..43 to void (i32*, i32*, ...)*), i32* nonnull %5, i32** nonnull %4, i32** nonnull %7) #17
  %241 = load i32*, i32** %4, align 8, !tbaa !9
  %242 = load i32, i32* %5, align 4, !tbaa !3
  %243 = add nsw i32 %242, 1
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i32, i32* %241, i64 %244
  store i32 0, i32* %245, align 4, !tbaa !3
  %246 = icmp slt i32 %224, 1
  br i1 %246, label %286, label %247

247:                                              ; preds = %223
  %248 = select i1 %27, i32 1, i32 2
  %249 = zext i32 %224 to i64
  %250 = and i64 %249, 1
  %251 = icmp eq i32 %224, 1
  br i1 %251, label %275, label %252

252:                                              ; preds = %247
  %253 = sub nsw i64 %249, %250
  br label %254

254:                                              ; preds = %254, %252
  %255 = phi i64 [ 1, %252 ], [ %272, %254 ]
  %256 = phi i64 [ %253, %252 ], [ %273, %254 ]
  %257 = getelementptr inbounds [637001 x i32], [637001 x i32]* @arow, i64 0, i64 %255
  %258 = load i32, i32* %257, align 4, !tbaa !3
  %259 = add i32 %258, %248
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i32, i32* %241, i64 %260
  %262 = load i32, i32* %261, align 4, !tbaa !3
  %263 = add nsw i32 %262, 1
  store i32 %263, i32* %261, align 4, !tbaa !3
  %264 = add nuw nsw i64 %255, 1
  %265 = getelementptr inbounds [637001 x i32], [637001 x i32]* @arow, i64 0, i64 %264
  %266 = load i32, i32* %265, align 4, !tbaa !3
  %267 = add i32 %266, %248
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i32, i32* %241, i64 %268
  %270 = load i32, i32* %269, align 4, !tbaa !3
  %271 = add nsw i32 %270, 1
  store i32 %271, i32* %269, align 4, !tbaa !3
  %272 = add nuw nsw i64 %255, 2
  %273 = add i64 %256, -2
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %254

275:                                              ; preds = %254, %247
  %276 = phi i64 [ 1, %247 ], [ %272, %254 ]
  %277 = icmp eq i64 %250, 0
  br i1 %277, label %286, label %278

278:                                              ; preds = %275
  %279 = getelementptr inbounds [637001 x i32], [637001 x i32]* @arow, i64 0, i64 %276
  %280 = load i32, i32* %279, align 4, !tbaa !3
  %281 = add i32 %280, %248
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds i32, i32* %241, i64 %282
  %284 = load i32, i32* %283, align 4, !tbaa !3
  %285 = add nsw i32 %284, 1
  store i32 %285, i32* %283, align 4, !tbaa !3
  br label %286

286:                                              ; preds = %278, %275, %223
  %287 = getelementptr inbounds i32, i32* %241, i64 1
  store i32 1, i32* %287, align 4, !tbaa !3
  %288 = load i32, i32* %8, align 4, !tbaa !3
  %289 = icmp slt i32 %288, 1
  br i1 %289, label %300, label %290

290:                                              ; preds = %290, %286
  %291 = phi i32 [ %295, %290 ], [ 1, %286 ]
  %292 = phi i64 [ %296, %290 ], [ 2, %286 ]
  %293 = getelementptr inbounds i32, i32* %241, i64 %292
  %294 = load i32, i32* %293, align 4, !tbaa !3
  %295 = add nsw i32 %294, %291
  store i32 %295, i32* %293, align 4, !tbaa !3
  %296 = add nuw nsw i64 %292, 1
  %297 = load i32, i32* %8, align 4, !tbaa !3
  %298 = sext i32 %297 to i64
  %299 = icmp sgt i64 %292, %298
  br i1 %299, label %300, label %290

300:                                              ; preds = %290, %286
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, double**)* @.omp_outlined..44 to void (i32*, i32*, ...)*), i32* nonnull %8, i32** nonnull %4, double** nonnull %3) #17
  %301 = load i32*, i32** %4, align 8, !tbaa !9
  br i1 %246, label %327, label %302

302:                                              ; preds = %300
  %303 = load double*, double** %3, align 8, !tbaa !9
  %304 = add nuw i32 %224, 1
  %305 = zext i32 %304 to i64
  br label %306

306:                                              ; preds = %306, %302
  %307 = phi i64 [ %325, %306 ], [ 1, %302 ]
  %308 = getelementptr inbounds [637001 x i32], [637001 x i32]* @arow, i64 0, i64 %307
  %309 = load i32, i32* %308, align 4, !tbaa !3
  %310 = add i32 %309, %239
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i32, i32* %301, i64 %311
  %313 = load i32, i32* %312, align 4, !tbaa !3
  %314 = getelementptr inbounds [637001 x double], [637001 x double]* @aelt, i64 0, i64 %307
  %315 = bitcast double* %314 to i64*
  %316 = load i64, i64* %315, align 8, !tbaa !7
  %317 = sext i32 %313 to i64
  %318 = getelementptr inbounds double, double* %303, i64 %317
  %319 = bitcast double* %318 to i64*
  store i64 %316, i64* %319, align 8, !tbaa !7
  %320 = getelementptr inbounds [637001 x i32], [637001 x i32]* @acol, i64 0, i64 %307
  %321 = load i32, i32* %320, align 4, !tbaa !3
  %322 = getelementptr inbounds i32, i32* %225, i64 %317
  store i32 %321, i32* %322, align 4, !tbaa !3
  %323 = load i32, i32* %312, align 4, !tbaa !3
  %324 = add nsw i32 %323, 1
  store i32 %324, i32* %312, align 4, !tbaa !3
  %325 = add nuw nsw i64 %307, 1
  %326 = icmp eq i64 %325, %305
  br i1 %326, label %327, label %306

327:                                              ; preds = %306, %300
  %328 = load i32, i32* %8, align 4, !tbaa !3
  %329 = icmp sgt i32 %328, 0
  br i1 %329, label %330, label %368

330:                                              ; preds = %327
  %331 = sext i32 %328 to i64
  %332 = add nsw i64 %331, -1
  %333 = and i64 %331, 3
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %345, label %335

335:                                              ; preds = %335, %330
  %336 = phi i64 [ %342, %335 ], [ %331, %330 ]
  %337 = phi i64 [ %343, %335 ], [ %333, %330 ]
  %338 = getelementptr inbounds i32, i32* %301, i64 %336
  %339 = load i32, i32* %338, align 4, !tbaa !3
  %340 = add nuw nsw i64 %336, 1
  %341 = getelementptr inbounds i32, i32* %301, i64 %340
  store i32 %339, i32* %341, align 4, !tbaa !3
  %342 = add nsw i64 %336, -1
  %343 = add i64 %337, -1
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %345, label %335, !llvm.loop !13

345:                                              ; preds = %335, %330
  %346 = phi i64 [ %331, %330 ], [ %342, %335 ]
  %347 = icmp ult i64 %332, 3
  br i1 %347, label %368, label %348

348:                                              ; preds = %348, %345
  %349 = phi i64 [ %366, %348 ], [ %346, %345 ]
  %350 = getelementptr inbounds i32, i32* %301, i64 %349
  %351 = load i32, i32* %350, align 4, !tbaa !3
  %352 = add nuw nsw i64 %349, 1
  %353 = getelementptr inbounds i32, i32* %301, i64 %352
  store i32 %351, i32* %353, align 4, !tbaa !3
  %354 = add nsw i64 %349, -1
  %355 = getelementptr inbounds i32, i32* %301, i64 %354
  %356 = load i32, i32* %355, align 4, !tbaa !3
  %357 = getelementptr inbounds i32, i32* %301, i64 %349
  store i32 %356, i32* %357, align 4, !tbaa !3
  %358 = add nsw i64 %349, -2
  %359 = getelementptr inbounds i32, i32* %301, i64 %358
  %360 = load i32, i32* %359, align 4, !tbaa !3
  %361 = getelementptr inbounds i32, i32* %301, i64 %354
  store i32 %360, i32* %361, align 4, !tbaa !3
  %362 = add nsw i64 %349, -3
  %363 = getelementptr inbounds i32, i32* %301, i64 %362
  %364 = load i32, i32* %363, align 4, !tbaa !3
  %365 = getelementptr inbounds i32, i32* %301, i64 %358
  store i32 %364, i32* %365, align 4, !tbaa !3
  %366 = add nsw i64 %349, -4
  %367 = icmp sgt i64 %366, 0
  br i1 %367, label %348, label %368

368:                                              ; preds = %348, %345, %327
  %369 = getelementptr inbounds i32, i32* %301, i64 1
  store i32 1, i32* %369, align 4, !tbaa !3
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double**, i32**)* @.omp_outlined..45 to void (i32*, i32*, ...)*), i32* nonnull %5, double** nonnull %6, i32** nonnull %7) #17
  %370 = load i32*, i32** %4, align 8, !tbaa !9
  %371 = getelementptr inbounds i32, i32* %370, i64 1
  %372 = load i32, i32* %8, align 4, !tbaa !3
  %373 = icmp slt i32 %372, 1
  br i1 %373, label %484, label %374

374:                                              ; preds = %368
  %375 = load i32, i32* %371, align 4, !tbaa !3
  %376 = load double*, double** %6, align 8
  %377 = load double*, double** %3, align 8
  %378 = load i32*, i32** %7, align 8
  br label %379

379:                                              ; preds = %443, %374
  %380 = phi i64 [ %383, %443 ], [ 1, %374 ]
  %381 = phi i32 [ %445, %443 ], [ 0, %374 ]
  %382 = phi i32 [ %444, %443 ], [ %375, %374 ]
  %383 = add nuw nsw i64 %380, 1
  %384 = getelementptr inbounds i32, i32* %370, i64 %383
  %385 = load i32, i32* %384, align 4, !tbaa !3
  %386 = icmp slt i32 %382, %385
  br i1 %386, label %387, label %443

387:                                              ; preds = %379
  %388 = sext i32 %382 to i64
  br label %394

389:                                              ; preds = %416
  %390 = icmp slt i32 %418, 1
  br i1 %390, label %443, label %391

391:                                              ; preds = %389
  %392 = add nuw i32 %418, 1
  %393 = zext i32 %392 to i64
  br label %422

394:                                              ; preds = %416, %387
  %395 = phi i32 [ %385, %387 ], [ %417, %416 ]
  %396 = phi i64 [ %388, %387 ], [ %419, %416 ]
  %397 = phi i32 [ 0, %387 ], [ %418, %416 ]
  %398 = getelementptr inbounds i32, i32* %225, i64 %396
  %399 = load i32, i32* %398, align 4, !tbaa !3
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds double, double* %376, i64 %400
  %402 = load double, double* %401, align 8, !tbaa !7
  %403 = getelementptr inbounds double, double* %377, i64 %396
  %404 = load double, double* %403, align 8, !tbaa !7
  %405 = fadd double %402, %404
  store double %405, double* %401, align 8, !tbaa !7
  %406 = getelementptr inbounds i32, i32* %378, i64 %400
  %407 = load i32, i32* %406, align 4, !tbaa !3
  %408 = icmp eq i32 %407, 0
  %409 = fcmp une double %405, 0.000000e+00
  %410 = and i1 %409, %408
  br i1 %410, label %411, label %416

411:                                              ; preds = %394
  store i32 1, i32* %406, align 4, !tbaa !3
  %412 = add nsw i32 %397, 1
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i32, i32* %227, i64 %413
  store i32 %399, i32* %414, align 4, !tbaa !3
  %415 = load i32, i32* %384, align 4, !tbaa !3
  br label %416

416:                                              ; preds = %411, %394
  %417 = phi i32 [ %415, %411 ], [ %395, %394 ]
  %418 = phi i32 [ %412, %411 ], [ %397, %394 ]
  %419 = add nsw i64 %396, 1
  %420 = sext i32 %417 to i64
  %421 = icmp slt i64 %419, %420
  br i1 %421, label %394, label %389

422:                                              ; preds = %437, %391
  %423 = phi i64 [ 1, %391 ], [ %439, %437 ]
  %424 = phi i32 [ %381, %391 ], [ %438, %437 ]
  %425 = getelementptr inbounds i32, i32* %227, i64 %423
  %426 = load i32, i32* %425, align 4, !tbaa !3
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds i32, i32* %378, i64 %427
  store i32 0, i32* %428, align 4, !tbaa !3
  %429 = getelementptr inbounds double, double* %376, i64 %427
  %430 = load double, double* %429, align 8, !tbaa !7
  store double 0.000000e+00, double* %429, align 8, !tbaa !7
  %431 = fcmp une double %430, 0.000000e+00
  br i1 %431, label %432, label %437

432:                                              ; preds = %422
  %433 = add nsw i32 %424, 1
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds double, double* %377, i64 %434
  store double %430, double* %435, align 8, !tbaa !7
  %436 = getelementptr inbounds i32, i32* %225, i64 %434
  store i32 %426, i32* %436, align 4, !tbaa !3
  br label %437

437:                                              ; preds = %432, %422
  %438 = phi i32 [ %433, %432 ], [ %424, %422 ]
  %439 = add nuw nsw i64 %423, 1
  %440 = icmp eq i64 %439, %393
  br i1 %440, label %441, label %422

441:                                              ; preds = %437
  %442 = load i32, i32* %384, align 4, !tbaa !3
  br label %443

443:                                              ; preds = %441, %389, %379
  %444 = phi i32 [ %417, %389 ], [ %442, %441 ], [ %385, %379 ]
  %445 = phi i32 [ %381, %389 ], [ %438, %441 ], [ %381, %379 ]
  %446 = load i32, i32* %371, align 4, !tbaa !3
  %447 = add nsw i32 %446, %445
  store i32 %447, i32* %384, align 4, !tbaa !3
  %448 = load i32, i32* %8, align 4, !tbaa !3
  %449 = sext i32 %448 to i64
  %450 = icmp slt i64 %380, %449
  br i1 %450, label %379, label %484

451:                                              ; preds = %143
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 2), align 16, !tbaa !7
  br label %452

452:                                              ; preds = %451, %143
  %453 = phi i32 [ 1, %451 ], [ %144, %143 ]
  %454 = load i32, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 3), align 4, !tbaa !3
  %455 = icmp eq i32 %454, %50
  br i1 %455, label %456, label %457

456:                                              ; preds = %452
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 3), align 8, !tbaa !7
  br label %457

457:                                              ; preds = %456, %452
  %458 = phi i32 [ 1, %456 ], [ %453, %452 ]
  %459 = load i32, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 4), align 16, !tbaa !3
  %460 = icmp eq i32 %459, %50
  br i1 %460, label %461, label %462

461:                                              ; preds = %457
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 4), align 16, !tbaa !7
  br label %462

462:                                              ; preds = %461, %457
  %463 = phi i32 [ 1, %461 ], [ %458, %457 ]
  %464 = load i32, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 5), align 4, !tbaa !3
  %465 = icmp eq i32 %464, %50
  br i1 %465, label %466, label %467

466:                                              ; preds = %462
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 5), align 8, !tbaa !7
  br label %467

467:                                              ; preds = %466, %462
  %468 = phi i32 [ 1, %466 ], [ %463, %462 ]
  %469 = load i32, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 6), align 8, !tbaa !3
  %470 = icmp eq i32 %469, %50
  br i1 %470, label %471, label %472

471:                                              ; preds = %467
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 6), align 16, !tbaa !7
  br label %472

472:                                              ; preds = %471, %467
  %473 = phi i32 [ 1, %471 ], [ %468, %467 ]
  %474 = load i32, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 7), align 4, !tbaa !3
  %475 = icmp eq i32 %474, %50
  br i1 %475, label %476, label %477

476:                                              ; preds = %472
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 7), align 8, !tbaa !7
  br label %477

477:                                              ; preds = %476, %472
  %478 = phi i32 [ 1, %476 ], [ %473, %472 ]
  %479 = load i32, i32* getelementptr inbounds ([14002 x i32], [14002 x i32]* @iv, i64 0, i64 8), align 16, !tbaa !3
  %480 = icmp eq i32 %479, %50
  br i1 %480, label %481, label %482

481:                                              ; preds = %477
  store double 5.000000e-01, double* getelementptr inbounds ([7002 x double], [7002 x double]* @v, i64 0, i64 8), align 16, !tbaa !7
  br label %148

482:                                              ; preds = %477
  %483 = icmp eq i32 %478, 0
  br i1 %483, label %147, label %148

484:                                              ; preds = %443, %368
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %237) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %228) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %229) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %230) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %231) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %232) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36)
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*)) #17
  call fastcc void @conj_grad(double* nonnull %12) #18
  store double 0.000000e+00, double* %13, align 8, !tbaa !7
  store double 0.000000e+00, double* %14, align 8, !tbaa !7
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, double*)* @.omp_outlined..4 to void (i32*, i32*, ...)*), double* nonnull %13, double* nonnull %14) #17
  %485 = load double, double* %14, align 8, !tbaa !7
  %486 = call double @sqrt(double %485) #19
  %487 = fdiv double 1.000000e+00, %486
  store double %487, double* %14, align 8, !tbaa !7
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*)* @.omp_outlined..5 to void (i32*, i32*, ...)*), double* nonnull %14) #17
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined..6 to void (i32*, i32*, ...)*)) #17
  call void @timer_clear(i32 1) #19
  call void @timer_start(i32 1) #19
  br label %488

488:                                              ; preds = %499, %484
  %489 = phi i32 [ 1, %484 ], [ %502, %499 ]
  call fastcc void @conj_grad(double* nonnull %12) #18
  store double 0.000000e+00, double* %13, align 8, !tbaa !7
  store double 0.000000e+00, double* %14, align 8, !tbaa !7
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, double*)* @.omp_outlined..7 to void (i32*, i32*, ...)*), double* nonnull %13, double* nonnull %14) #17
  %490 = load double, double* %14, align 8, !tbaa !7
  %491 = call double @sqrt(double %490) #19
  %492 = fdiv double 1.000000e+00, %491
  store double %492, double* %14, align 8, !tbaa !7
  %493 = load double, double* %13, align 8, !tbaa !7
  %494 = fdiv double 1.000000e+00, %493
  %495 = fadd double %494, 1.200000e+01
  %496 = icmp eq i32 %489, 1
  br i1 %496, label %497, label %499

497:                                              ; preds = %488
  %498 = call i32 @puts(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @str.49, i64 0, i64 0))
  br label %499

499:                                              ; preds = %497, %488
  %500 = load double, double* %12, align 8, !tbaa !7
  %501 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i32 %489, double %500, double %495) #18
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*)* @.omp_outlined..11 to void (i32*, i32*, ...)*), double* nonnull %14) #17
  %502 = add nuw nsw i32 %489, 1
  %503 = icmp eq i32 %502, 16
  br i1 %503, label %504, label %488

504:                                              ; preds = %499
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..12 to void (i32*, i32*, ...)*), i32* nonnull %11) #17
  call void @timer_stop(i32 1) #19
  %505 = call double @timer_read(i32 1) #19
  %506 = call i32 @puts(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.46, i64 0, i64 0))
  %507 = fadd double %495, 0xC024B9A61031C694
  %508 = call double @llvm.fabs.f64(double %507)
  %509 = fcmp ugt double %508, 1.000000e-10
  br i1 %509, label %514, label %510

510:                                              ; preds = %504
  %511 = call i32 @puts(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str.48, i64 0, i64 0))
  %512 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), double %495) #18
  %513 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0), double %507) #18
  br label %518

514:                                              ; preds = %504
  %515 = call i32 @puts(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.47, i64 0, i64 0))
  %516 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0), double %495) #18
  %517 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i64 0, i64 0), double 0x4024B9A61031C694) #18
  br label %518

518:                                              ; preds = %514, %510
  %519 = phi i32 [ 1, %510 ], [ 0, %514 ]
  %520 = fcmp une double %505, 0.000000e+00
  br i1 %520, label %521, label %524

521:                                              ; preds = %518
  %522 = fdiv double 4.206300e+08, %505
  %523 = fdiv double %522, 1.000000e+06
  br label %524

524:                                              ; preds = %521, %518
  %525 = phi double [ %523, %521 ], [ 0.000000e+00, %518 ]
  %526 = load i32, i32* %11, align 4, !tbaa !3
  call void @c_print_results(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0), i8 signext 87, i32 7000, i32 0, i32 0, i32 15, i32 %526, double %505, double %525, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i64 0, i64 0), i32 %519, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i64 0, i64 0)) #19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #17
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nofree noredzone nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: nofree noredzone nounwind
declare double @pow(double, double) local_unnamed_addr #3

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..39(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture readonly dereferenceable(4), i32** nocapture readonly dereferenceable(8)) #4 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = load i32, i32* %2, align 4, !tbaa !3
  %10 = add nsw i32 %9, -1
  %11 = icmp sgt i32 %9, 0
  br i1 %11, label %12, label %35

12:                                               ; preds = %4
  %13 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #17
  store i32 0, i32* %5, align 4, !tbaa !3
  %14 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #17
  store i32 %10, i32* %6, align 4, !tbaa !3
  %15 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #17
  store i32 1, i32* %7, align 4, !tbaa !3
  %16 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #17
  store i32 0, i32* %8, align 4, !tbaa !3
  %17 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %17, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #17
  %18 = load i32, i32* %6, align 4, !tbaa !3
  %19 = icmp sgt i32 %18, %10
  %20 = select i1 %19, i32 %10, i32 %18
  store i32 %20, i32* %6, align 4, !tbaa !3
  %21 = load i32, i32* %5, align 4, !tbaa !3
  %22 = icmp sgt i32 %21, %20
  br i1 %22, label %34, label %23

23:                                               ; preds = %12
  %24 = load i32*, i32** %3, align 8, !tbaa !9
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i32 [ %21, %23 ], [ %27, %25 ]
  %27 = add nsw i32 %26, 1
  %28 = load i32, i32* %2, align 4, !tbaa !3
  %29 = add nsw i32 %28, %27
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, i32* %24, i64 %30
  store i32 0, i32* %31, align 4, !tbaa !3
  %32 = load i32, i32* %6, align 4, !tbaa !3
  %33 = icmp slt i32 %26, %32
  br i1 %33, label %25, label %34

34:                                               ; preds = %25, %12
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %17) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #17
  br label %35

35:                                               ; preds = %34, %4
  ret void
}

declare !callback !14 void @__kmpc_fork_call(%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr

; Function Attrs: noredzone noreturn nounwind
declare void @exit(i32) local_unnamed_addr #5

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..43(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture readonly dereferenceable(4), i32** nocapture readonly dereferenceable(8), i32** nocapture readonly dereferenceable(8)) #4 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = load i32, i32* %2, align 4, !tbaa !3
  %11 = add nsw i32 %10, -1
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %37

13:                                               ; preds = %5
  %14 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #17
  store i32 0, i32* %6, align 4, !tbaa !3
  %15 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #17
  store i32 %11, i32* %7, align 4, !tbaa !3
  %16 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #17
  store i32 1, i32* %8, align 4, !tbaa !3
  %17 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #17
  store i32 0, i32* %9, align 4, !tbaa !3
  %18 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %18, i32 34, i32* nonnull %9, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32 1, i32 1) #17
  %19 = load i32, i32* %7, align 4, !tbaa !3
  %20 = icmp sgt i32 %19, %11
  %21 = select i1 %20, i32 %11, i32 %19
  store i32 %21, i32* %7, align 4, !tbaa !3
  %22 = load i32, i32* %6, align 4, !tbaa !3
  %23 = icmp sgt i32 %22, %21
  br i1 %23, label %36, label %24

24:                                               ; preds = %13
  %25 = load i32*, i32** %3, align 8, !tbaa !9
  %26 = load i32*, i32** %4, align 8, !tbaa !9
  %27 = sext i32 %22 to i64
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i64 [ %30, %28 ], [ %27, %24 ]
  %30 = add nsw i64 %29, 1
  %31 = getelementptr inbounds i32, i32* %25, i64 %30
  store i32 0, i32* %31, align 4, !tbaa !3
  %32 = getelementptr inbounds i32, i32* %26, i64 %30
  store i32 0, i32* %32, align 4, !tbaa !3
  %33 = load i32, i32* %7, align 4, !tbaa !3
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %29, %34
  br i1 %35, label %28, label %36

36:                                               ; preds = %28, %13
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %18) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #17
  br label %37

37:                                               ; preds = %36, %5
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..44(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture readonly dereferenceable(4), i32** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8)) #4 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = load i32, i32* %2, align 4, !tbaa !3
  %11 = add nsw i32 %10, -1
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %52

13:                                               ; preds = %5
  %14 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #17
  store i32 0, i32* %6, align 4, !tbaa !3
  %15 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #17
  store i32 %11, i32* %7, align 4, !tbaa !3
  %16 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #17
  store i32 1, i32* %8, align 4, !tbaa !3
  %17 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #17
  store i32 0, i32* %9, align 4, !tbaa !3
  %18 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %18, i32 34, i32* nonnull %9, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32 1, i32 1) #17
  %19 = load i32, i32* %7, align 4, !tbaa !3
  %20 = icmp sgt i32 %19, %11
  %21 = select i1 %20, i32 %11, i32 %19
  store i32 %21, i32* %7, align 4, !tbaa !3
  %22 = load i32, i32* %6, align 4, !tbaa !3
  %23 = icmp sgt i32 %22, %21
  br i1 %23, label %51, label %24

24:                                               ; preds = %13
  %25 = load i32*, i32** %3, align 8, !tbaa !9
  %26 = load double*, double** %4, align 8
  %27 = sext i32 %22 to i64
  %28 = sext i32 %21 to i64
  br label %31

29:                                               ; preds = %39, %31
  %30 = icmp slt i64 %32, %28
  br i1 %30, label %31, label %51

31:                                               ; preds = %29, %24
  %32 = phi i64 [ %35, %29 ], [ %27, %24 ]
  %33 = getelementptr inbounds i32, i32* %25, i64 %32
  %34 = load i32, i32* %33, align 4, !tbaa !3
  %35 = add nsw i64 %32, 1
  %36 = getelementptr inbounds i32, i32* %25, i64 %35
  %37 = load i32, i32* %36, align 4, !tbaa !3
  %38 = icmp slt i32 %34, %37
  br i1 %38, label %39, label %29

39:                                               ; preds = %31
  %40 = sext i32 %34 to i64
  %41 = getelementptr double, double* %26, i64 %40
  %42 = bitcast double* %41 to i8*
  %43 = add nsw i32 %34, 1
  %44 = icmp sgt i32 %37, %43
  %45 = select i1 %44, i32 %37, i32 %43
  %46 = xor i32 %34, -1
  %47 = add i32 %45, %46
  %48 = zext i32 %47 to i64
  %49 = shl nuw nsw i64 %48, 3
  %50 = add nuw nsw i64 %49, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 %50, i1 false)
  br label %29

51:                                               ; preds = %29, %13
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %18) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #17
  br label %52

52:                                               ; preds = %51, %5
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..45(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture readonly dereferenceable(4), double** nocapture readonly dereferenceable(8), i32** nocapture readonly dereferenceable(8)) #4 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = load i32, i32* %2, align 4, !tbaa !3
  %11 = add nsw i32 %10, -1
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %37

13:                                               ; preds = %5
  %14 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #17
  store i32 0, i32* %6, align 4, !tbaa !3
  %15 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #17
  store i32 %11, i32* %7, align 4, !tbaa !3
  %16 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #17
  store i32 1, i32* %8, align 4, !tbaa !3
  %17 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #17
  store i32 0, i32* %9, align 4, !tbaa !3
  %18 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %18, i32 34, i32* nonnull %9, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32 1, i32 1) #17
  %19 = load i32, i32* %7, align 4, !tbaa !3
  %20 = icmp sgt i32 %19, %11
  %21 = select i1 %20, i32 %11, i32 %19
  store i32 %21, i32* %7, align 4, !tbaa !3
  %22 = load i32, i32* %6, align 4, !tbaa !3
  %23 = icmp sgt i32 %22, %21
  br i1 %23, label %36, label %24

24:                                               ; preds = %13
  %25 = load double*, double** %3, align 8, !tbaa !9
  %26 = load i32*, i32** %4, align 8, !tbaa !9
  %27 = sext i32 %22 to i64
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i64 [ %30, %28 ], [ %27, %24 ]
  %30 = add nsw i64 %29, 1
  %31 = getelementptr inbounds double, double* %25, i64 %30
  store double 0.000000e+00, double* %31, align 8, !tbaa !7
  %32 = getelementptr inbounds i32, i32* %26, i64 %30
  store i32 0, i32* %32, align 4, !tbaa !3
  %33 = load i32, i32* %7, align 4, !tbaa !3
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %29, %34
  br i1 %35, label %28, label %36

36:                                               ; preds = %28, %13
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %18) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #17
  br label %37

37:                                               ; preds = %36, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly, i32* noalias nocapture readnone) #4 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = load i1, i1* @lastrow, align 4
  %16 = select i1 %15, i32 7000, i32 0
  %17 = load i1, i1* @firstrow, align 4
  %18 = zext i1 %17 to i32
  %19 = sub nsw i32 %16, %18
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %23, label %21

21:                                               ; preds = %2
  %22 = load i32, i32* %0, align 4, !tbaa !3
  br label %133

23:                                               ; preds = %2
  %24 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #17
  store i32 0, i32* %3, align 4, !tbaa !3
  %25 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #17
  store i32 %19, i32* %4, align 4, !tbaa !3
  %26 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #17
  store i32 1, i32* %5, align 4, !tbaa !3
  %27 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #17
  store i32 0, i32* %6, align 4, !tbaa !3
  %28 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %28, i32 34, i32* nonnull %6, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32 1, i32 1) #17
  %29 = load i32, i32* %4, align 4, !tbaa !3
  %30 = icmp sgt i32 %29, %19
  %31 = select i1 %30, i32 %19, i32 %29
  store i32 %31, i32* %4, align 4, !tbaa !3
  %32 = load i32, i32* %3, align 4, !tbaa !3
  %33 = icmp sgt i32 %32, %31
  br i1 %33, label %132, label %34

34:                                               ; preds = %23
  %35 = load i1, i1* @firstcol, align 4
  %36 = sext i32 %32 to i64
  %37 = sext i32 %31 to i64
  %38 = zext i1 %35 to i32
  %39 = insertelement <4 x i32> undef, i32 %38, i32 0
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> zeroinitializer
  %41 = insertelement <4 x i32> undef, i32 %38, i32 0
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %45

43:                                               ; preds = %124, %120, %45
  %44 = icmp slt i64 %46, %37
  br i1 %44, label %45, label %132

45:                                               ; preds = %43, %34
  %46 = phi i64 [ %47, %43 ], [ %36, %34 ]
  %47 = add nsw i64 %46, 1
  %48 = getelementptr inbounds [7002 x i32], [7002 x i32]* @rowstr, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4, !tbaa !3
  %50 = add nsw i64 %46, 2
  %51 = getelementptr inbounds [7002 x i32], [7002 x i32]* @rowstr, i64 0, i64 %50
  %52 = load i32, i32* %51, align 4, !tbaa !3
  %53 = icmp slt i32 %49, %52
  br i1 %53, label %54, label %43

54:                                               ; preds = %45
  %55 = sext i32 %49 to i64
  %56 = sext i32 %52 to i64
  %57 = sext i32 %52 to i64
  %58 = sub nsw i64 %57, %55
  %59 = icmp ult i64 %58, 8
  br i1 %59, label %122, label %60

60:                                               ; preds = %54
  %61 = and i64 %58, -8
  %62 = add nsw i64 %61, %55
  %63 = add nsw i64 %61, -8
  %64 = lshr exact i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %63, 0
  br i1 %67, label %103, label %68

68:                                               ; preds = %60
  %69 = sub nuw nsw i64 %65, %66
  br label %70

70:                                               ; preds = %70, %68
  %71 = phi i64 [ 0, %68 ], [ %100, %70 ]
  %72 = phi i64 [ %69, %68 ], [ %101, %70 ]
  %73 = add i64 %71, %55
  %74 = getelementptr inbounds [637001 x i32], [637001 x i32]* @colidx, i64 0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4, !tbaa !3
  %77 = getelementptr inbounds i32, i32* %74, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !tbaa !3
  %80 = add <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %81 = add <4 x i32> %79, <i32 1, i32 1, i32 1, i32 1>
  %82 = sub <4 x i32> %80, %40
  %83 = sub <4 x i32> %81, %42
  %84 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %84, align 4, !tbaa !3
  %85 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %85, align 4, !tbaa !3
  %86 = or i64 %71, 8
  %87 = add i64 %86, %55
  %88 = getelementptr inbounds [637001 x i32], [637001 x i32]* @colidx, i64 0, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !tbaa !3
  %91 = getelementptr inbounds i32, i32* %88, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !tbaa !3
  %94 = add <4 x i32> %90, <i32 1, i32 1, i32 1, i32 1>
  %95 = add <4 x i32> %93, <i32 1, i32 1, i32 1, i32 1>
  %96 = sub <4 x i32> %94, %40
  %97 = sub <4 x i32> %95, %42
  %98 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %98, align 4, !tbaa !3
  %99 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %99, align 4, !tbaa !3
  %100 = add i64 %71, 16
  %101 = add i64 %72, -2
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %70, !llvm.loop !16

103:                                              ; preds = %70, %60
  %104 = phi i64 [ 0, %60 ], [ %100, %70 ]
  %105 = icmp eq i64 %66, 0
  br i1 %105, label %120, label %106

106:                                              ; preds = %103
  %107 = add i64 %104, %55
  %108 = getelementptr inbounds [637001 x i32], [637001 x i32]* @colidx, i64 0, i64 %107
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !tbaa !3
  %111 = getelementptr inbounds i32, i32* %108, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !tbaa !3
  %114 = add <4 x i32> %110, <i32 1, i32 1, i32 1, i32 1>
  %115 = add <4 x i32> %113, <i32 1, i32 1, i32 1, i32 1>
  %116 = sub <4 x i32> %114, %40
  %117 = sub <4 x i32> %115, %42
  %118 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %118, align 4, !tbaa !3
  %119 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %119, align 4, !tbaa !3
  br label %120

120:                                              ; preds = %106, %103
  %121 = icmp eq i64 %58, %61
  br i1 %121, label %43, label %122

122:                                              ; preds = %120, %54
  %123 = phi i64 [ %55, %54 ], [ %62, %120 ]
  br label %124

124:                                              ; preds = %124, %122
  %125 = phi i64 [ %130, %124 ], [ %123, %122 ]
  %126 = getelementptr inbounds [637001 x i32], [637001 x i32]* @colidx, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4, !tbaa !3
  %128 = add i32 %127, 1
  %129 = sub i32 %128, %38
  store i32 %129, i32* %126, align 4, !tbaa !3
  %130 = add nsw i64 %125, 1
  %131 = icmp slt i64 %130, %56
  br i1 %131, label %124, label %43, !llvm.loop !18

132:                                              ; preds = %43, %23
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %28) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #17
  br label %133

133:                                              ; preds = %132, %21
  %134 = phi i32 [ %22, %21 ], [ %28, %132 ]
  %135 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %135) #17
  store i32 0, i32* %7, align 4, !tbaa !3
  %136 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %136) #17
  store i32 7000, i32* %8, align 4, !tbaa !3
  %137 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %137) #17
  store i32 1, i32* %9, align 4, !tbaa !3
  %138 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %138) #17
  store i32 0, i32* %10, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %134, i32 34, i32* nonnull %10, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32 1, i32 1) #17
  %139 = load i32, i32* %8, align 4, !tbaa !3
  %140 = icmp slt i32 %139, 7000
  %141 = select i1 %140, i32 %139, i32 7000
  store i32 %141, i32* %8, align 4, !tbaa !3
  %142 = load i32, i32* %7, align 4, !tbaa !3
  %143 = icmp sgt i32 %142, %141
  br i1 %143, label %219, label %144

144:                                              ; preds = %133
  %145 = sext i32 %142 to i64
  %146 = sext i32 %141 to i64
  %147 = icmp sgt i64 %145, %146
  %148 = select i1 %147, i64 %145, i64 %146
  %149 = add nsw i64 %148, 1
  %150 = sub nsw i64 %149, %145
  %151 = icmp ult i64 %150, 4
  br i1 %151, label %212, label %152

152:                                              ; preds = %144
  %153 = and i64 %150, -4
  %154 = add nsw i64 %153, %145
  %155 = add nsw i64 %153, -4
  %156 = lshr exact i64 %155, 2
  %157 = add nuw nsw i64 %156, 1
  %158 = and i64 %157, 3
  %159 = icmp ult i64 %155, 12
  br i1 %159, label %195, label %160

160:                                              ; preds = %152
  %161 = sub nsw i64 %157, %158
  br label %162

162:                                              ; preds = %162, %160
  %163 = phi i64 [ 0, %160 ], [ %192, %162 ]
  %164 = phi i64 [ %161, %160 ], [ %193, %162 ]
  %165 = add i64 %163, %145
  %166 = add nsw i64 %165, 1
  %167 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %166
  %168 = bitcast double* %167 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %168, align 8, !tbaa !7
  %169 = getelementptr inbounds double, double* %167, i64 2
  %170 = bitcast double* %169 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %170, align 8, !tbaa !7
  %171 = or i64 %163, 4
  %172 = add i64 %171, %145
  %173 = add nsw i64 %172, 1
  %174 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %173
  %175 = bitcast double* %174 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %175, align 8, !tbaa !7
  %176 = getelementptr inbounds double, double* %174, i64 2
  %177 = bitcast double* %176 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %177, align 8, !tbaa !7
  %178 = or i64 %163, 8
  %179 = add i64 %178, %145
  %180 = add nsw i64 %179, 1
  %181 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %180
  %182 = bitcast double* %181 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %182, align 8, !tbaa !7
  %183 = getelementptr inbounds double, double* %181, i64 2
  %184 = bitcast double* %183 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %184, align 8, !tbaa !7
  %185 = or i64 %163, 12
  %186 = add i64 %185, %145
  %187 = add nsw i64 %186, 1
  %188 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %187
  %189 = bitcast double* %188 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %189, align 8, !tbaa !7
  %190 = getelementptr inbounds double, double* %188, i64 2
  %191 = bitcast double* %190 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %191, align 8, !tbaa !7
  %192 = add i64 %163, 16
  %193 = add i64 %164, -4
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %162, !llvm.loop !20

195:                                              ; preds = %162, %152
  %196 = phi i64 [ 0, %152 ], [ %192, %162 ]
  %197 = icmp eq i64 %158, 0
  br i1 %197, label %210, label %198

198:                                              ; preds = %198, %195
  %199 = phi i64 [ %207, %198 ], [ %196, %195 ]
  %200 = phi i64 [ %208, %198 ], [ %158, %195 ]
  %201 = add i64 %199, %145
  %202 = add nsw i64 %201, 1
  %203 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %202
  %204 = bitcast double* %203 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %204, align 8, !tbaa !7
  %205 = getelementptr inbounds double, double* %203, i64 2
  %206 = bitcast double* %205 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %206, align 8, !tbaa !7
  %207 = add i64 %199, 4
  %208 = add i64 %200, -1
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %198, !llvm.loop !21

210:                                              ; preds = %198, %195
  %211 = icmp eq i64 %150, %153
  br i1 %211, label %219, label %212

212:                                              ; preds = %210, %144
  %213 = phi i64 [ %145, %144 ], [ %154, %210 ]
  br label %214

214:                                              ; preds = %214, %212
  %215 = phi i64 [ %216, %214 ], [ %213, %212 ]
  %216 = add nsw i64 %215, 1
  %217 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %216
  store double 1.000000e+00, double* %217, align 8, !tbaa !7
  %218 = icmp slt i64 %215, %146
  br i1 %218, label %214, label %219, !llvm.loop !22

219:                                              ; preds = %214, %210, %133
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %134) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %138) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %135) #17
  %220 = load i1, i1* @lastcol, align 4
  %221 = select i1 %220, i32 7000, i32 0
  %222 = load i1, i1* @firstcol, align 4
  %223 = zext i1 %222 to i32
  %224 = sub nsw i32 %221, %223
  %225 = icmp sgt i32 %224, -1
  br i1 %225, label %226, label %252

226:                                              ; preds = %219
  %227 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %227) #17
  store i32 0, i32* %11, align 4, !tbaa !3
  %228 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %228) #17
  store i32 %224, i32* %12, align 4, !tbaa !3
  %229 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %229) #17
  store i32 1, i32* %13, align 4, !tbaa !3
  %230 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %230) #17
  store i32 0, i32* %14, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %134, i32 34, i32* nonnull %14, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13, i32 1, i32 1) #17
  %231 = load i32, i32* %12, align 4, !tbaa !3
  %232 = icmp sgt i32 %231, %224
  %233 = select i1 %232, i32 %224, i32 %231
  store i32 %233, i32* %12, align 4, !tbaa !3
  %234 = load i32, i32* %11, align 4, !tbaa !3
  %235 = icmp slt i32 %233, %234
  br i1 %235, label %251, label %236

236:                                              ; preds = %226
  %237 = sext i32 %234 to i64
  %238 = add nsw i64 %237, 1
  %239 = getelementptr [7003 x double], [7003 x double]* @q, i64 0, i64 %238
  %240 = bitcast double* %239 to i8*
  %241 = sub i32 %233, %234
  %242 = zext i32 %241 to i64
  %243 = shl nuw nsw i64 %242, 3
  %244 = add nuw nsw i64 %243, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %240, i8 0, i64 %244, i1 false)
  %245 = getelementptr [7003 x double], [7003 x double]* @z, i64 0, i64 %238
  %246 = bitcast double* %245 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %246, i8 0, i64 %244, i1 false)
  %247 = getelementptr [7003 x double], [7003 x double]* @r, i64 0, i64 %238
  %248 = bitcast double* %247 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %248, i8 0, i64 %244, i1 false)
  %249 = getelementptr [7003 x double], [7003 x double]* @p, i64 0, i64 %238
  %250 = bitcast double* %249 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %250, i8 0, i64 %244, i1 false)
  br label %251

251:                                              ; preds = %236, %226
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %134) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %230) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %229) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %228) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %227) #17
  br label %252

252:                                              ; preds = %251, %219
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define internal fastcc void @conj_grad(double* nocapture) unnamed_addr #0 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca i32, align 4
  store i32* getelementptr inbounds ([637001 x i32], [637001 x i32]* @colidx, i64 0, i64 0), i32** %2, align 8, !tbaa !9
  %15 = bitcast i32** %2 to i8*
  call void @nk_carat_instrument_escapes(i8* %15)
  store i32* getelementptr inbounds ([7002 x i32], [7002 x i32]* @rowstr, i64 0, i64 0), i32** %3, align 8, !tbaa !9
  %16 = bitcast i32** %3 to i8*
  call void @nk_carat_instrument_escapes(i8* %16)
  store double* getelementptr inbounds ([7003 x double], [7003 x double]* @x, i64 0, i64 0), double** %4, align 8, !tbaa !9
  %17 = bitcast double** %4 to i8*
  call void @nk_carat_instrument_escapes(i8* %17)
  store double* getelementptr inbounds ([7003 x double], [7003 x double]* @z, i64 0, i64 0), double** %5, align 8, !tbaa !9
  %18 = bitcast double** %5 to i8*
  call void @nk_carat_instrument_escapes(i8* %18)
  store double* getelementptr inbounds ([637001 x double], [637001 x double]* @a, i64 0, i64 0), double** %6, align 8, !tbaa !9
  %19 = bitcast double** %6 to i8*
  call void @nk_carat_instrument_escapes(i8* %19)
  store double* getelementptr inbounds ([7003 x double], [7003 x double]* @p, i64 0, i64 0), double** %7, align 8, !tbaa !9
  %20 = bitcast double** %7 to i8*
  call void @nk_carat_instrument_escapes(i8* %20)
  store double* getelementptr inbounds ([7003 x double], [7003 x double]* @q, i64 0, i64 0), double** %8, align 8, !tbaa !9
  %21 = bitcast double** %8 to i8*
  call void @nk_carat_instrument_escapes(i8* %21)
  store double* getelementptr inbounds ([7003 x double], [7003 x double]* @r, i64 0, i64 0), double** %9, align 8, !tbaa !9
  %22 = bitcast double** %9 to i8*
  call void @nk_carat_instrument_escapes(i8* %22)
  %23 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #17
  %24 = bitcast double* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #17
  %25 = bitcast double* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #17
  %26 = bitcast double* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #17
  %27 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #17
  store double 0.000000e+00, double* %12, align 8, !tbaa !7
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double**, double**, double**, double**, double**, double*)* @.omp_outlined..32 to void (i32*, i32*, ...)*), double** nonnull %8, double** nonnull %5, double** nonnull %9, double** nonnull %4, double** nonnull %7, double* nonnull %12) #17
  %28 = bitcast double* %12 to i64*
  %29 = bitcast double* %13 to i64*
  br label %30

30:                                               ; preds = %30, %1
  %31 = phi i32 [ 1, %1 ], [ %33, %30 ]
  %32 = load i64, i64* %28, align 8, !tbaa !7
  store i64 %32, i64* %29, align 8, !tbaa !7
  store double 0.000000e+00, double* %10, align 8, !tbaa !7
  store double 0.000000e+00, double* %12, align 8, !tbaa !7
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 10, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32**, double**, double**, i32**, double**, double*, double*, double*, double**, double**)* @.omp_outlined..34 to void (i32*, i32*, ...)*), i32** nonnull %3, double** nonnull %6, double** nonnull %7, i32** nonnull %2, double** nonnull %8, double* nonnull %10, double* nonnull %13, double* nonnull %12, double** nonnull %5, double** nonnull %9) #17
  %33 = add nuw nsw i32 %31, 1
  %34 = icmp eq i32 %33, 26
  br i1 %34, label %35, label %30

35:                                               ; preds = %30
  store double 0.000000e+00, double* %11, align 8, !tbaa !7
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, double**, double**, i32**, double**, double*, double**)* @.omp_outlined..37 to void (i32*, i32*, ...)*), i32* nonnull %14, i32** nonnull %3, double** nonnull %6, double** nonnull %5, i32** nonnull %2, double** nonnull %9, double* nonnull %11, double** nonnull %4) #17
  %36 = load double, double* %11, align 8, !tbaa !7
  %37 = call double @sqrt(double %36) #19
  store double %37, double* %0, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #17
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..4(i32* noalias nocapture readonly, i32* noalias nocapture readnone, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8)) #4 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca [2 x i8*], align 8
  %12 = load i1, i1* @lastcol, align 4
  %13 = select i1 %12, i32 7000, i32 0
  %14 = load i1, i1* @firstcol, align 4
  %15 = zext i1 %14 to i32
  %16 = sub nsw i32 %13, %15
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %18, label %91

18:                                               ; preds = %4
  %19 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #17
  store i32 0, i32* %5, align 4, !tbaa !3
  %20 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #17
  store i32 %16, i32* %6, align 4, !tbaa !3
  %21 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #17
  store i32 1, i32* %7, align 4, !tbaa !3
  %22 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #17
  store i32 0, i32* %8, align 4, !tbaa !3
  %23 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #17
  store double 0.000000e+00, double* %9, align 8, !tbaa !7
  %24 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #17
  store double 0.000000e+00, double* %10, align 8, !tbaa !7
  %25 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %25, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #17
  %26 = load i32, i32* %6, align 4, !tbaa !3
  %27 = icmp sgt i32 %26, %16
  %28 = select i1 %27, i32 %16, i32 %26
  store i32 %28, i32* %6, align 4, !tbaa !3
  %29 = load i32, i32* %5, align 4, !tbaa !3
  %30 = icmp sgt i32 %29, %28
  br i1 %30, label %51, label %31

31:                                               ; preds = %18
  %32 = sext i32 %29 to i64
  %33 = sext i32 %28 to i64
  br label %34

34:                                               ; preds = %34, %31
  %35 = phi i64 [ %37, %34 ], [ %32, %31 ]
  %36 = phi <2 x double> [ %46, %34 ], [ zeroinitializer, %31 ]
  %37 = add nsw i64 %35, 1
  %38 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %37
  %39 = load double, double* %38, align 8, !tbaa !7
  %40 = getelementptr inbounds [7003 x double], [7003 x double]* @z, i64 0, i64 %37
  %41 = load double, double* %40, align 8, !tbaa !7
  %42 = insertelement <2 x double> undef, double %41, i32 0
  %43 = insertelement <2 x double> %42, double %39, i32 1
  %44 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> zeroinitializer
  %45 = fmul <2 x double> %43, %44
  %46 = fadd <2 x double> %45, %36
  %47 = icmp slt i64 %35, %33
  br i1 %47, label %34, label %48

48:                                               ; preds = %34
  %49 = extractelement <2 x double> %46, i32 1
  store double %49, double* %9, align 8, !tbaa !7
  %50 = extractelement <2 x double> %46, i32 0
  store double %50, double* %10, align 8, !tbaa !7
  br label %51

51:                                               ; preds = %48, %18
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %25) #17
  %52 = bitcast [2 x i8*]* %11 to double**
  store double* %9, double** %52, align 8
  %53 = bitcast double** %52 to i8*
  call void @nk_carat_instrument_escapes(i8* %53)
  %54 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 1
  %55 = bitcast i8** %54 to double**
  store double* %10, double** %55, align 8
  %56 = bitcast double** %55 to i8*
  call void @nk_carat_instrument_escapes(i8* %56)
  %57 = bitcast [2 x i8*]* %11 to i8*
  %58 = call i32 @__kmpc_reduce_nowait(%struct.ident_t* nonnull @2, i32 %25, i32 2, i64 16, i8* nonnull %57, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  switch i32 %58, label %90 [
    i32 1, label %59
    i32 2, label %66
  ]

59:                                               ; preds = %51
  %60 = load double, double* %2, align 8, !tbaa !7
  %61 = load double, double* %9, align 8, !tbaa !7
  %62 = fadd double %60, %61
  store double %62, double* %2, align 8, !tbaa !7
  %63 = load double, double* %3, align 8, !tbaa !7
  %64 = load double, double* %10, align 8, !tbaa !7
  %65 = fadd double %63, %64
  store double %65, double* %3, align 8, !tbaa !7
  call void @__kmpc_end_reduce_nowait(%struct.ident_t* nonnull @2, i32 %25, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  br label %90

66:                                               ; preds = %51
  %67 = bitcast double* %2 to i64*
  %68 = load atomic i64, i64* %67 monotonic, align 8, !tbaa !7
  %69 = load double, double* %9, align 8, !tbaa !7
  br label %70

70:                                               ; preds = %70, %66
  %71 = phi i64 [ %68, %66 ], [ %76, %70 ]
  %72 = bitcast i64 %71 to double
  %73 = fadd double %69, %72
  %74 = bitcast double %73 to i64
  %75 = cmpxchg i64* %67, i64 %71, i64 %74 monotonic monotonic
  %76 = extractvalue { i64, i1 } %75, 0
  %77 = extractvalue { i64, i1 } %75, 1
  br i1 %77, label %78, label %70

78:                                               ; preds = %70
  %79 = bitcast double* %3 to i64*
  %80 = load atomic i64, i64* %79 monotonic, align 8, !tbaa !7
  %81 = load double, double* %10, align 8, !tbaa !7
  br label %82

82:                                               ; preds = %82, %78
  %83 = phi i64 [ %80, %78 ], [ %88, %82 ]
  %84 = bitcast i64 %83 to double
  %85 = fadd double %81, %84
  %86 = bitcast double %85 to i64
  %87 = cmpxchg i64* %79, i64 %83, i64 %86 monotonic monotonic
  %88 = extractvalue { i64, i1 } %87, 0
  %89 = extractvalue { i64, i1 } %87, 1
  br i1 %89, label %90, label %82

90:                                               ; preds = %82, %59, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #17
  br label %91

91:                                               ; preds = %90, %4
  ret void
}

; Function Attrs: nofree noredzone nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..5(i32* noalias nocapture readonly, i32* noalias nocapture readnone, double* nocapture readonly dereferenceable(8)) #4 {
  %4 = bitcast double* %2 to i8*
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = load i1, i1* @lastcol, align 4
  %10 = select i1 %9, i32 7000, i32 0
  %11 = load i1, i1* @firstcol, align 4
  %12 = zext i1 %11 to i32
  %13 = sub nsw i32 %10, %12
  %14 = icmp sgt i32 %13, -1
  br i1 %14, label %15, label %92

15:                                               ; preds = %3
  %16 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #17
  store i32 0, i32* %5, align 4, !tbaa !3
  %17 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #17
  store i32 %13, i32* %6, align 4, !tbaa !3
  %18 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #17
  store i32 1, i32* %7, align 4, !tbaa !3
  %19 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #17
  store i32 0, i32* %8, align 4, !tbaa !3
  %20 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %20, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #17
  %21 = load i32, i32* %6, align 4, !tbaa !3
  %22 = icmp sgt i32 %21, %13
  %23 = select i1 %22, i32 %13, i32 %21
  store i32 %23, i32* %6, align 4, !tbaa !3
  %24 = load i32, i32* %5, align 4, !tbaa !3
  %25 = icmp sgt i32 %24, %23
  br i1 %25, label %91, label %26

26:                                               ; preds = %15
  %27 = sext i32 %24 to i64
  %28 = sext i32 %23 to i64
  %29 = icmp sgt i64 %27, %28
  %30 = select i1 %29, i64 %27, i64 %28
  %31 = add nsw i64 %30, 1
  %32 = sub nsw i64 %31, %27
  %33 = icmp ult i64 %32, 4
  br i1 %33, label %80, label %34

34:                                               ; preds = %26
  %35 = add nsw i64 %27, 1
  %36 = getelementptr [7003 x double], [7003 x double]* @x, i64 0, i64 %35
  %37 = bitcast double* %36 to i8*
  %38 = icmp sgt i64 %27, %28
  %39 = select i1 %38, i64 %27, i64 %28
  %40 = add nsw i64 %39, 2
  %41 = getelementptr [7003 x double], [7003 x double]* @x, i64 0, i64 %40
  %42 = getelementptr i8, i8* %4, i64 1
  %43 = getelementptr [7003 x double], [7003 x double]* @z, i64 0, i64 %35
  %44 = getelementptr [7003 x double], [7003 x double]* @z, i64 0, i64 %40
  %45 = icmp ugt i8* %42, %37
  %46 = icmp ugt double* %41, %2
  %47 = and i1 %45, %46
  %48 = icmp ult double* %36, %44
  %49 = icmp ult double* %43, %41
  %50 = and i1 %48, %49
  %51 = or i1 %47, %50
  br i1 %51, label %80, label %52

52:                                               ; preds = %34
  %53 = and i64 %32, -4
  %54 = add nsw i64 %53, %27
  %55 = load double, double* %2, align 8, !tbaa !7, !alias.scope !23
  %56 = insertelement <2 x double> undef, double %55, i32 0
  %57 = shufflevector <2 x double> %56, <2 x double> undef, <2 x i32> zeroinitializer
  %58 = insertelement <2 x double> undef, double %55, i32 0
  %59 = shufflevector <2 x double> %58, <2 x double> undef, <2 x i32> zeroinitializer
  br label %60

60:                                               ; preds = %60, %52
  %61 = phi i64 [ 0, %52 ], [ %76, %60 ]
  %62 = add i64 %61, %27
  %63 = add nsw i64 %62, 1
  %64 = getelementptr inbounds [7003 x double], [7003 x double]* @z, i64 0, i64 %63
  %65 = bitcast double* %64 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 8, !tbaa !7, !alias.scope !26
  %67 = getelementptr inbounds double, double* %64, i64 2
  %68 = bitcast double* %67 to <2 x double>*
  %69 = load <2 x double>, <2 x double>* %68, align 8, !tbaa !7, !alias.scope !26
  %70 = fmul <2 x double> %57, %66
  %71 = fmul <2 x double> %59, %69
  %72 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %63
  %73 = bitcast double* %72 to <2 x double>*
  store <2 x double> %70, <2 x double>* %73, align 8, !tbaa !7, !alias.scope !28, !noalias !30
  %74 = getelementptr inbounds double, double* %72, i64 2
  %75 = bitcast double* %74 to <2 x double>*
  store <2 x double> %71, <2 x double>* %75, align 8, !tbaa !7, !alias.scope !28, !noalias !30
  %76 = add i64 %61, 4
  %77 = icmp eq i64 %76, %53
  br i1 %77, label %78, label %60, !llvm.loop !31

78:                                               ; preds = %60
  %79 = icmp eq i64 %32, %53
  br i1 %79, label %91, label %80

80:                                               ; preds = %78, %34, %26
  %81 = phi i64 [ %27, %34 ], [ %27, %26 ], [ %54, %78 ]
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ %84, %82 ], [ %81, %80 ]
  %84 = add nsw i64 %83, 1
  %85 = load double, double* %2, align 8, !tbaa !7
  %86 = getelementptr inbounds [7003 x double], [7003 x double]* @z, i64 0, i64 %84
  %87 = load double, double* %86, align 8, !tbaa !7
  %88 = fmul double %85, %87
  %89 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %84
  store double %88, double* %89, align 8, !tbaa !7
  %90 = icmp slt i64 %83, %28
  br i1 %90, label %82, label %91, !llvm.loop !32

91:                                               ; preds = %82, %78, %15
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %20) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #17
  br label %92

92:                                               ; preds = %91, %3
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..6(i32* noalias nocapture readonly, i32* noalias nocapture readnone) #4 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #17
  store i32 0, i32* %3, align 4, !tbaa !3
  %8 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #17
  store i32 7000, i32* %4, align 4, !tbaa !3
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #17
  store i32 1, i32* %5, align 4, !tbaa !3
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17
  store i32 0, i32* %6, align 4, !tbaa !3
  %11 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %11, i32 34, i32* nonnull %6, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32 1, i32 1) #17
  %12 = load i32, i32* %4, align 4, !tbaa !3
  %13 = icmp slt i32 %12, 7000
  %14 = select i1 %13, i32 %12, i32 7000
  store i32 %14, i32* %4, align 4, !tbaa !3
  %15 = load i32, i32* %3, align 4, !tbaa !3
  %16 = icmp sgt i32 %15, %14
  br i1 %16, label %92, label %17

17:                                               ; preds = %2
  %18 = sext i32 %15 to i64
  %19 = sext i32 %14 to i64
  %20 = icmp sgt i64 %18, %19
  %21 = select i1 %20, i64 %18, i64 %19
  %22 = add nsw i64 %21, 1
  %23 = sub nsw i64 %22, %18
  %24 = icmp ult i64 %23, 4
  br i1 %24, label %85, label %25

25:                                               ; preds = %17
  %26 = and i64 %23, -4
  %27 = add nsw i64 %26, %18
  %28 = add nsw i64 %26, -4
  %29 = lshr exact i64 %28, 2
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 3
  %32 = icmp ult i64 %28, 12
  br i1 %32, label %68, label %33

33:                                               ; preds = %25
  %34 = sub nsw i64 %30, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %65, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %66, %35 ]
  %38 = add i64 %36, %18
  %39 = add nsw i64 %38, 1
  %40 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %39
  %41 = bitcast double* %40 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %41, align 8, !tbaa !7
  %42 = getelementptr inbounds double, double* %40, i64 2
  %43 = bitcast double* %42 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %43, align 8, !tbaa !7
  %44 = or i64 %36, 4
  %45 = add i64 %44, %18
  %46 = add nsw i64 %45, 1
  %47 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %46
  %48 = bitcast double* %47 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %48, align 8, !tbaa !7
  %49 = getelementptr inbounds double, double* %47, i64 2
  %50 = bitcast double* %49 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %50, align 8, !tbaa !7
  %51 = or i64 %36, 8
  %52 = add i64 %51, %18
  %53 = add nsw i64 %52, 1
  %54 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %53
  %55 = bitcast double* %54 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %55, align 8, !tbaa !7
  %56 = getelementptr inbounds double, double* %54, i64 2
  %57 = bitcast double* %56 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %57, align 8, !tbaa !7
  %58 = or i64 %36, 12
  %59 = add i64 %58, %18
  %60 = add nsw i64 %59, 1
  %61 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %60
  %62 = bitcast double* %61 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %62, align 8, !tbaa !7
  %63 = getelementptr inbounds double, double* %61, i64 2
  %64 = bitcast double* %63 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %64, align 8, !tbaa !7
  %65 = add i64 %36, 16
  %66 = add i64 %37, -4
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %35, !llvm.loop !33

68:                                               ; preds = %35, %25
  %69 = phi i64 [ 0, %25 ], [ %65, %35 ]
  %70 = icmp eq i64 %31, 0
  br i1 %70, label %83, label %71

71:                                               ; preds = %71, %68
  %72 = phi i64 [ %80, %71 ], [ %69, %68 ]
  %73 = phi i64 [ %81, %71 ], [ %31, %68 ]
  %74 = add i64 %72, %18
  %75 = add nsw i64 %74, 1
  %76 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %75
  %77 = bitcast double* %76 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %77, align 8, !tbaa !7
  %78 = getelementptr inbounds double, double* %76, i64 2
  %79 = bitcast double* %78 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %79, align 8, !tbaa !7
  %80 = add i64 %72, 4
  %81 = add i64 %73, -1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %71, !llvm.loop !34

83:                                               ; preds = %71, %68
  %84 = icmp eq i64 %23, %26
  br i1 %84, label %92, label %85

85:                                               ; preds = %83, %17
  %86 = phi i64 [ %18, %17 ], [ %27, %83 ]
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ %89, %87 ], [ %86, %85 ]
  %89 = add nsw i64 %88, 1
  %90 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %89
  store double 1.000000e+00, double* %90, align 8, !tbaa !7
  %91 = icmp slt i64 %88, %19
  br i1 %91, label %87, label %92, !llvm.loop !35

92:                                               ; preds = %87, %83, %2
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %11) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #17
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..7(i32* noalias nocapture readonly, i32* noalias nocapture readnone, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8)) #4 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca [2 x i8*], align 8
  %12 = load i1, i1* @lastcol, align 4
  %13 = select i1 %12, i32 7000, i32 0
  %14 = load i1, i1* @firstcol, align 4
  %15 = zext i1 %14 to i32
  %16 = sub nsw i32 %13, %15
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %18, label %91

18:                                               ; preds = %4
  %19 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #17
  store i32 0, i32* %5, align 4, !tbaa !3
  %20 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #17
  store i32 %16, i32* %6, align 4, !tbaa !3
  %21 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #17
  store i32 1, i32* %7, align 4, !tbaa !3
  %22 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #17
  store i32 0, i32* %8, align 4, !tbaa !3
  %23 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #17
  store double 0.000000e+00, double* %9, align 8, !tbaa !7
  %24 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #17
  store double 0.000000e+00, double* %10, align 8, !tbaa !7
  %25 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %25, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #17
  %26 = load i32, i32* %6, align 4, !tbaa !3
  %27 = icmp sgt i32 %26, %16
  %28 = select i1 %27, i32 %16, i32 %26
  store i32 %28, i32* %6, align 4, !tbaa !3
  %29 = load i32, i32* %5, align 4, !tbaa !3
  %30 = icmp sgt i32 %29, %28
  br i1 %30, label %51, label %31

31:                                               ; preds = %18
  %32 = sext i32 %29 to i64
  %33 = sext i32 %28 to i64
  br label %34

34:                                               ; preds = %34, %31
  %35 = phi i64 [ %37, %34 ], [ %32, %31 ]
  %36 = phi <2 x double> [ %46, %34 ], [ zeroinitializer, %31 ]
  %37 = add nsw i64 %35, 1
  %38 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %37
  %39 = load double, double* %38, align 8, !tbaa !7
  %40 = getelementptr inbounds [7003 x double], [7003 x double]* @z, i64 0, i64 %37
  %41 = load double, double* %40, align 8, !tbaa !7
  %42 = insertelement <2 x double> undef, double %41, i32 0
  %43 = insertelement <2 x double> %42, double %39, i32 1
  %44 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> zeroinitializer
  %45 = fmul <2 x double> %43, %44
  %46 = fadd <2 x double> %45, %36
  %47 = icmp slt i64 %35, %33
  br i1 %47, label %34, label %48

48:                                               ; preds = %34
  %49 = extractelement <2 x double> %46, i32 1
  store double %49, double* %9, align 8, !tbaa !7
  %50 = extractelement <2 x double> %46, i32 0
  store double %50, double* %10, align 8, !tbaa !7
  br label %51

51:                                               ; preds = %48, %18
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %25) #17
  %52 = bitcast [2 x i8*]* %11 to double**
  store double* %9, double** %52, align 8
  %53 = bitcast double** %52 to i8*
  call void @nk_carat_instrument_escapes(i8* %53)
  %54 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 1
  %55 = bitcast i8** %54 to double**
  store double* %10, double** %55, align 8
  %56 = bitcast double** %55 to i8*
  call void @nk_carat_instrument_escapes(i8* %56)
  %57 = bitcast [2 x i8*]* %11 to i8*
  %58 = call i32 @__kmpc_reduce_nowait(%struct.ident_t* nonnull @2, i32 %25, i32 2, i64 16, i8* nonnull %57, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.8, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  switch i32 %58, label %90 [
    i32 1, label %59
    i32 2, label %66
  ]

59:                                               ; preds = %51
  %60 = load double, double* %2, align 8, !tbaa !7
  %61 = load double, double* %9, align 8, !tbaa !7
  %62 = fadd double %60, %61
  store double %62, double* %2, align 8, !tbaa !7
  %63 = load double, double* %3, align 8, !tbaa !7
  %64 = load double, double* %10, align 8, !tbaa !7
  %65 = fadd double %63, %64
  store double %65, double* %3, align 8, !tbaa !7
  call void @__kmpc_end_reduce_nowait(%struct.ident_t* nonnull @2, i32 %25, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  br label %90

66:                                               ; preds = %51
  %67 = bitcast double* %2 to i64*
  %68 = load atomic i64, i64* %67 monotonic, align 8, !tbaa !7
  %69 = load double, double* %9, align 8, !tbaa !7
  br label %70

70:                                               ; preds = %70, %66
  %71 = phi i64 [ %68, %66 ], [ %76, %70 ]
  %72 = bitcast i64 %71 to double
  %73 = fadd double %69, %72
  %74 = bitcast double %73 to i64
  %75 = cmpxchg i64* %67, i64 %71, i64 %74 monotonic monotonic
  %76 = extractvalue { i64, i1 } %75, 0
  %77 = extractvalue { i64, i1 } %75, 1
  br i1 %77, label %78, label %70

78:                                               ; preds = %70
  %79 = bitcast double* %3 to i64*
  %80 = load atomic i64, i64* %79 monotonic, align 8, !tbaa !7
  %81 = load double, double* %10, align 8, !tbaa !7
  br label %82

82:                                               ; preds = %82, %78
  %83 = phi i64 [ %80, %78 ], [ %88, %82 ]
  %84 = bitcast i64 %83 to double
  %85 = fadd double %81, %84
  %86 = bitcast double %85 to i64
  %87 = cmpxchg i64* %79, i64 %83, i64 %86 monotonic monotonic
  %88 = extractvalue { i64, i1 } %87, 0
  %89 = extractvalue { i64, i1 } %87, 1
  br i1 %89, label %90, label %82

90:                                               ; preds = %82, %59, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #17
  br label %91

91:                                               ; preds = %90, %4
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..11(i32* noalias nocapture readonly, i32* noalias nocapture readnone, double* nocapture readonly dereferenceable(8)) #4 {
  %4 = bitcast double* %2 to i8*
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = load i1, i1* @lastcol, align 4
  %10 = select i1 %9, i32 7000, i32 0
  %11 = load i1, i1* @firstcol, align 4
  %12 = zext i1 %11 to i32
  %13 = sub nsw i32 %10, %12
  %14 = icmp sgt i32 %13, -1
  br i1 %14, label %15, label %92

15:                                               ; preds = %3
  %16 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #17
  store i32 0, i32* %5, align 4, !tbaa !3
  %17 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #17
  store i32 %13, i32* %6, align 4, !tbaa !3
  %18 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #17
  store i32 1, i32* %7, align 4, !tbaa !3
  %19 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #17
  store i32 0, i32* %8, align 4, !tbaa !3
  %20 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %20, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #17
  %21 = load i32, i32* %6, align 4, !tbaa !3
  %22 = icmp sgt i32 %21, %13
  %23 = select i1 %22, i32 %13, i32 %21
  store i32 %23, i32* %6, align 4, !tbaa !3
  %24 = load i32, i32* %5, align 4, !tbaa !3
  %25 = icmp sgt i32 %24, %23
  br i1 %25, label %91, label %26

26:                                               ; preds = %15
  %27 = sext i32 %24 to i64
  %28 = sext i32 %23 to i64
  %29 = icmp sgt i64 %27, %28
  %30 = select i1 %29, i64 %27, i64 %28
  %31 = add nsw i64 %30, 1
  %32 = sub nsw i64 %31, %27
  %33 = icmp ult i64 %32, 4
  br i1 %33, label %80, label %34

34:                                               ; preds = %26
  %35 = add nsw i64 %27, 1
  %36 = getelementptr [7003 x double], [7003 x double]* @x, i64 0, i64 %35
  %37 = bitcast double* %36 to i8*
  %38 = icmp sgt i64 %27, %28
  %39 = select i1 %38, i64 %27, i64 %28
  %40 = add nsw i64 %39, 2
  %41 = getelementptr [7003 x double], [7003 x double]* @x, i64 0, i64 %40
  %42 = getelementptr i8, i8* %4, i64 1
  %43 = getelementptr [7003 x double], [7003 x double]* @z, i64 0, i64 %35
  %44 = getelementptr [7003 x double], [7003 x double]* @z, i64 0, i64 %40
  %45 = icmp ugt i8* %42, %37
  %46 = icmp ugt double* %41, %2
  %47 = and i1 %45, %46
  %48 = icmp ult double* %36, %44
  %49 = icmp ult double* %43, %41
  %50 = and i1 %48, %49
  %51 = or i1 %47, %50
  br i1 %51, label %80, label %52

52:                                               ; preds = %34
  %53 = and i64 %32, -4
  %54 = add nsw i64 %53, %27
  %55 = load double, double* %2, align 8, !tbaa !7, !alias.scope !36
  %56 = insertelement <2 x double> undef, double %55, i32 0
  %57 = shufflevector <2 x double> %56, <2 x double> undef, <2 x i32> zeroinitializer
  %58 = insertelement <2 x double> undef, double %55, i32 0
  %59 = shufflevector <2 x double> %58, <2 x double> undef, <2 x i32> zeroinitializer
  br label %60

60:                                               ; preds = %60, %52
  %61 = phi i64 [ 0, %52 ], [ %76, %60 ]
  %62 = add i64 %61, %27
  %63 = add nsw i64 %62, 1
  %64 = getelementptr inbounds [7003 x double], [7003 x double]* @z, i64 0, i64 %63
  %65 = bitcast double* %64 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 8, !tbaa !7, !alias.scope !39
  %67 = getelementptr inbounds double, double* %64, i64 2
  %68 = bitcast double* %67 to <2 x double>*
  %69 = load <2 x double>, <2 x double>* %68, align 8, !tbaa !7, !alias.scope !39
  %70 = fmul <2 x double> %57, %66
  %71 = fmul <2 x double> %59, %69
  %72 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %63
  %73 = bitcast double* %72 to <2 x double>*
  store <2 x double> %70, <2 x double>* %73, align 8, !tbaa !7, !alias.scope !41, !noalias !43
  %74 = getelementptr inbounds double, double* %72, i64 2
  %75 = bitcast double* %74 to <2 x double>*
  store <2 x double> %71, <2 x double>* %75, align 8, !tbaa !7, !alias.scope !41, !noalias !43
  %76 = add i64 %61, 4
  %77 = icmp eq i64 %76, %53
  br i1 %77, label %78, label %60, !llvm.loop !44

78:                                               ; preds = %60
  %79 = icmp eq i64 %32, %53
  br i1 %79, label %91, label %80

80:                                               ; preds = %78, %34, %26
  %81 = phi i64 [ %27, %34 ], [ %27, %26 ], [ %54, %78 ]
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ %84, %82 ], [ %81, %80 ]
  %84 = add nsw i64 %83, 1
  %85 = load double, double* %2, align 8, !tbaa !7
  %86 = getelementptr inbounds [7003 x double], [7003 x double]* @z, i64 0, i64 %84
  %87 = load double, double* %86, align 8, !tbaa !7
  %88 = fmul double %85, %87
  %89 = getelementptr inbounds [7003 x double], [7003 x double]* @x, i64 0, i64 %84
  store double %88, double* %89, align 8, !tbaa !7
  %90 = icmp slt i64 %83, %28
  br i1 %90, label %82, label %91, !llvm.loop !45

91:                                               ; preds = %82, %78, %15
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %20) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #17
  br label %92

92:                                               ; preds = %91, %3
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..12(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture dereferenceable(4)) #4 {
  %4 = load i32, i32* %0, align 4, !tbaa !3
  %5 = tail call i32 @__kmpc_master(%struct.ident_t* nonnull @0, i32 %4) #17
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i32 @omp_get_num_threads() #19
  store i32 %8, i32* %2, align 4, !tbaa !3
  tail call void @__kmpc_end_master(%struct.ident_t* nonnull @0, i32 %4) #17
  br label %9

9:                                                ; preds = %7, %3
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

declare i32 @__kmpc_master(%struct.ident_t*, i32) local_unnamed_addr

; Function Attrs: noredzone
declare i32 @omp_get_num_threads() local_unnamed_addr #7

declare void @__kmpc_end_master(%struct.ident_t*, i32) local_unnamed_addr

declare void @__kmpc_for_static_init_4(%struct.ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr

declare void @__kmpc_for_static_fini(%struct.ident_t*, i32) local_unnamed_addr

; Function Attrs: nofree norecurse noredzone nounwind uwtable
define internal void @.omp.reduction.reduction_func.8(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to double**
  %4 = load double*, double** %3, align 8
  %5 = bitcast i8* %0 to double**
  %6 = load double*, double** %5, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 8
  %8 = bitcast i8* %7 to double**
  %9 = load double*, double** %8, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to double**
  %12 = load double*, double** %11, align 8
  %13 = load double, double* %6, align 8, !tbaa !7
  %14 = load double, double* %4, align 8, !tbaa !7
  %15 = fadd double %13, %14
  store double %15, double* %6, align 8, !tbaa !7
  %16 = load double, double* %12, align 8, !tbaa !7
  %17 = load double, double* %9, align 8, !tbaa !7
  %18 = fadd double %16, %17
  store double %18, double* %12, align 8, !tbaa !7
  ret void
}

declare i32 @__kmpc_reduce_nowait(%struct.ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_end_reduce_nowait(%struct.ident_t*, i32, [8 x i32]*) local_unnamed_addr

; Function Attrs: nofree norecurse noredzone nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to double**
  %4 = load double*, double** %3, align 8
  %5 = bitcast i8* %0 to double**
  %6 = load double*, double** %5, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 8
  %8 = bitcast i8* %7 to double**
  %9 = load double*, double** %8, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to double**
  %12 = load double*, double** %11, align 8
  %13 = load double, double* %6, align 8, !tbaa !7
  %14 = load double, double* %4, align 8, !tbaa !7
  %15 = fadd double %13, %14
  store double %15, double* %6, align 8, !tbaa !7
  %16 = load double, double* %12, align 8, !tbaa !7
  %17 = load double, double* %9, align 8, !tbaa !7
  %18 = fadd double %16, %17
  store double %18, double* %12, align 8, !tbaa !7
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..32(i32* noalias nocapture readonly, i32* noalias nocapture readnone, double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double* nocapture dereferenceable(8)) #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca double, align 8
  %18 = alloca [1 x i8*], align 8
  %19 = load i1, i1* @naa, align 4
  %20 = select i1 %19, i32 7000, i32 0
  %21 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #17
  store i32 0, i32* %9, align 4, !tbaa !3
  %22 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #17
  store i32 %20, i32* %10, align 4, !tbaa !3
  %23 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #17
  store i32 1, i32* %11, align 4, !tbaa !3
  %24 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #17
  store i32 0, i32* %12, align 4, !tbaa !3
  %25 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %25, i32 34, i32* nonnull %12, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11, i32 1, i32 1) #17
  %26 = load i32, i32* %10, align 4, !tbaa !3
  %27 = icmp sgt i32 %26, %20
  %28 = select i1 %27, i32 %20, i32 %26
  store i32 %28, i32* %10, align 4, !tbaa !3
  %29 = load i32, i32* %9, align 4, !tbaa !3
  %30 = icmp sgt i32 %29, %28
  br i1 %30, label %52, label %31

31:                                               ; preds = %8
  %32 = load double*, double** %2, align 8, !tbaa !9
  %33 = load double*, double** %3, align 8, !tbaa !9
  %34 = load double*, double** %5, align 8, !tbaa !9
  %35 = load double*, double** %4, align 8, !tbaa !9
  %36 = load double*, double** %6, align 8, !tbaa !9
  %37 = sext i32 %29 to i64
  %38 = sext i32 %28 to i64
  br label %39

39:                                               ; preds = %39, %31
  %40 = phi i64 [ %41, %39 ], [ %37, %31 ]
  %41 = add nsw i64 %40, 1
  %42 = getelementptr inbounds double, double* %32, i64 %41
  store double 0.000000e+00, double* %42, align 8, !tbaa !7
  %43 = getelementptr inbounds double, double* %33, i64 %41
  store double 0.000000e+00, double* %43, align 8, !tbaa !7
  %44 = getelementptr inbounds double, double* %34, i64 %41
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8, !tbaa !7
  %47 = getelementptr inbounds double, double* %35, i64 %41
  %48 = bitcast double* %47 to i64*
  store i64 %46, i64* %48, align 8, !tbaa !7
  %49 = getelementptr inbounds double, double* %36, i64 %41
  %50 = bitcast double* %49 to i64*
  store i64 %46, i64* %50, align 8, !tbaa !7
  %51 = icmp slt i64 %40, %38
  br i1 %51, label %39, label %52

52:                                               ; preds = %39, %8
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %25) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #17
  call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %25) #17
  %53 = load i1, i1* @lastcol, align 4
  %54 = select i1 %53, i32 7000, i32 0
  %55 = load i1, i1* @firstcol, align 4
  %56 = zext i1 %55 to i32
  %57 = sub nsw i32 %54, %56
  %58 = icmp sgt i32 %57, -1
  br i1 %58, label %59, label %106

59:                                               ; preds = %52
  %60 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %60) #17
  store i32 0, i32* %13, align 4, !tbaa !3
  %61 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %61) #17
  store i32 %57, i32* %14, align 4, !tbaa !3
  %62 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %62) #17
  store i32 1, i32* %15, align 4, !tbaa !3
  %63 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %63) #17
  store i32 0, i32* %16, align 4, !tbaa !3
  %64 = bitcast double* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #17
  store double 0.000000e+00, double* %17, align 8, !tbaa !7
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %25, i32 34, i32* nonnull %16, i32* nonnull %13, i32* nonnull %14, i32* nonnull %15, i32 1, i32 1) #17
  %65 = load i32, i32* %14, align 4, !tbaa !3
  %66 = icmp sgt i32 %65, %57
  %67 = select i1 %66, i32 %57, i32 %65
  store i32 %67, i32* %14, align 4, !tbaa !3
  %68 = load i32, i32* %13, align 4, !tbaa !3
  %69 = icmp sgt i32 %68, %67
  br i1 %69, label %83, label %70

70:                                               ; preds = %59
  %71 = load double*, double** %4, align 8, !tbaa !9
  %72 = sext i32 %68 to i64
  %73 = sext i32 %67 to i64
  br label %74

74:                                               ; preds = %74, %70
  %75 = phi double [ %81, %74 ], [ 0.000000e+00, %70 ]
  %76 = phi i64 [ %77, %74 ], [ %72, %70 ]
  %77 = add nsw i64 %76, 1
  %78 = getelementptr inbounds double, double* %71, i64 %77
  %79 = load double, double* %78, align 8, !tbaa !7
  %80 = fmul double %79, %79
  %81 = fadd double %75, %80
  store double %81, double* %17, align 8, !tbaa !7
  %82 = icmp slt i64 %76, %73
  br i1 %82, label %74, label %83

83:                                               ; preds = %74, %59
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %25) #17
  %84 = bitcast [1 x i8*]* %18 to double**
  store double* %17, double** %84, align 8
  %85 = bitcast double** %84 to i8*
  call void @nk_carat_instrument_escapes(i8* %85)
  %86 = bitcast [1 x i8*]* %18 to i8*
  %87 = call i32 @__kmpc_reduce(%struct.ident_t* nonnull @2, i32 %25, i32 1, i64 8, i8* nonnull %86, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.33, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  switch i32 %87, label %105 [
    i32 1, label %88
    i32 2, label %92
  ]

88:                                               ; preds = %83
  %89 = load double, double* %7, align 8, !tbaa !7
  %90 = load double, double* %17, align 8, !tbaa !7
  %91 = fadd double %89, %90
  store double %91, double* %7, align 8, !tbaa !7
  br label %104

92:                                               ; preds = %83
  %93 = bitcast double* %7 to i64*
  %94 = load atomic i64, i64* %93 monotonic, align 8, !tbaa !7
  %95 = load double, double* %17, align 8, !tbaa !7
  br label %96

96:                                               ; preds = %96, %92
  %97 = phi i64 [ %94, %92 ], [ %102, %96 ]
  %98 = bitcast i64 %97 to double
  %99 = fadd double %95, %98
  %100 = bitcast double %99 to i64
  %101 = cmpxchg i64* %93, i64 %97, i64 %100 monotonic monotonic
  %102 = extractvalue { i64, i1 } %101, 0
  %103 = extractvalue { i64, i1 } %101, 1
  br i1 %103, label %104, label %96

104:                                              ; preds = %96, %88
  call void @__kmpc_end_reduce(%struct.ident_t* nonnull @2, i32 %25, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  br label %105

105:                                              ; preds = %104, %83
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %63) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %60) #17
  br label %106

106:                                              ; preds = %105, %52
  call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %25) #17
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..34(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), i32** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double* nocapture dereferenceable(8), double* nocapture readonly dereferenceable(8), double* nocapture dereferenceable(8), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8)) #4 {
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca double, align 8
  %22 = alloca [1 x i8*], align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca double, align 8
  %28 = alloca [1 x i8*], align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = load i1, i1* @lastrow, align 4
  %34 = select i1 %33, i32 7000, i32 0
  %35 = load i1, i1* @firstrow, align 4
  %36 = zext i1 %35 to i32
  %37 = sub nsw i32 %34, %36
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %41, label %39

39:                                               ; preds = %12
  %40 = load i32, i32* %0, align 4, !tbaa !3
  br label %147

41:                                               ; preds = %12
  %42 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42) #17
  store i32 0, i32* %13, align 4, !tbaa !3
  %43 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43) #17
  store i32 %37, i32* %14, align 4, !tbaa !3
  %44 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #17
  store i32 1, i32* %15, align 4, !tbaa !3
  %45 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #17
  store i32 0, i32* %16, align 4, !tbaa !3
  %46 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %46, i32 34, i32* nonnull %16, i32* nonnull %13, i32* nonnull %14, i32* nonnull %15, i32 1, i32 1) #17
  %47 = load i32, i32* %14, align 4, !tbaa !3
  %48 = icmp sgt i32 %47, %37
  %49 = select i1 %48, i32 %37, i32 %47
  store i32 %49, i32* %14, align 4, !tbaa !3
  %50 = load i32, i32* %13, align 4, !tbaa !3
  %51 = icmp sgt i32 %50, %49
  br i1 %51, label %146, label %52

52:                                               ; preds = %41
  %53 = load i32*, i32** %2, align 8, !tbaa !9
  %54 = load double*, double** %3, align 8
  %55 = load double*, double** %4, align 8
  %56 = load i32*, i32** %5, align 8
  %57 = load double*, double** %6, align 8, !tbaa !9
  %58 = sext i32 %50 to i64
  %59 = sext i32 %49 to i64
  br label %60

60:                                               ; preds = %142, %52
  %61 = phi i64 [ %62, %142 ], [ %58, %52 ]
  %62 = add nsw i64 %61, 1
  %63 = getelementptr inbounds i32, i32* %53, i64 %62
  %64 = load i32, i32* %63, align 4, !tbaa !3
  %65 = add nsw i64 %61, 2
  %66 = getelementptr inbounds i32, i32* %53, i64 %65
  %67 = load i32, i32* %66, align 4, !tbaa !3
  %68 = icmp slt i32 %64, %67
  br i1 %68, label %69, label %142

69:                                               ; preds = %60
  %70 = sext i32 %64 to i64
  %71 = sext i32 %67 to i64
  %72 = sub nsw i64 %71, %70
  %73 = xor i64 %70, -1
  %74 = add nsw i64 %73, %71
  %75 = and i64 %72, 3
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %93, label %77

77:                                               ; preds = %77, %69
  %78 = phi i64 [ %90, %77 ], [ %70, %69 ]
  %79 = phi double [ %89, %77 ], [ 0.000000e+00, %69 ]
  %80 = phi i64 [ %91, %77 ], [ %75, %69 ]
  %81 = getelementptr inbounds double, double* %54, i64 %78
  %82 = load double, double* %81, align 8, !tbaa !7
  %83 = getelementptr inbounds i32, i32* %56, i64 %78
  %84 = load i32, i32* %83, align 4, !tbaa !3
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds double, double* %55, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !7
  %88 = fmul double %82, %87
  %89 = fadd double %79, %88
  %90 = add nsw i64 %78, 1
  %91 = add i64 %80, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %77, !llvm.loop !46

93:                                               ; preds = %77, %69
  %94 = phi i64 [ %70, %69 ], [ %90, %77 ]
  %95 = phi double [ 0.000000e+00, %69 ], [ %89, %77 ]
  %96 = phi double [ undef, %69 ], [ %89, %77 ]
  %97 = icmp ult i64 %74, 3
  br i1 %97, label %142, label %98

98:                                               ; preds = %98, %93
  %99 = phi i64 [ %140, %98 ], [ %94, %93 ]
  %100 = phi double [ %139, %98 ], [ %95, %93 ]
  %101 = getelementptr inbounds double, double* %54, i64 %99
  %102 = load double, double* %101, align 8, !tbaa !7
  %103 = getelementptr inbounds i32, i32* %56, i64 %99
  %104 = load i32, i32* %103, align 4, !tbaa !3
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %55, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !7
  %108 = fmul double %102, %107
  %109 = fadd double %100, %108
  %110 = add nsw i64 %99, 1
  %111 = getelementptr inbounds double, double* %54, i64 %110
  %112 = load double, double* %111, align 8, !tbaa !7
  %113 = getelementptr inbounds i32, i32* %56, i64 %110
  %114 = load i32, i32* %113, align 4, !tbaa !3
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %55, i64 %115
  %117 = load double, double* %116, align 8, !tbaa !7
  %118 = fmul double %112, %117
  %119 = fadd double %109, %118
  %120 = add nsw i64 %99, 2
  %121 = getelementptr inbounds double, double* %54, i64 %120
  %122 = load double, double* %121, align 8, !tbaa !7
  %123 = getelementptr inbounds i32, i32* %56, i64 %120
  %124 = load i32, i32* %123, align 4, !tbaa !3
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds double, double* %55, i64 %125
  %127 = load double, double* %126, align 8, !tbaa !7
  %128 = fmul double %122, %127
  %129 = fadd double %119, %128
  %130 = add nsw i64 %99, 3
  %131 = getelementptr inbounds double, double* %54, i64 %130
  %132 = load double, double* %131, align 8, !tbaa !7
  %133 = getelementptr inbounds i32, i32* %56, i64 %130
  %134 = load i32, i32* %133, align 4, !tbaa !3
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds double, double* %55, i64 %135
  %137 = load double, double* %136, align 8, !tbaa !7
  %138 = fmul double %132, %137
  %139 = fadd double %129, %138
  %140 = add nsw i64 %99, 4
  %141 = icmp slt i64 %140, %71
  br i1 %141, label %98, label %142

142:                                              ; preds = %98, %93, %60
  %143 = phi double [ 0.000000e+00, %60 ], [ %96, %93 ], [ %139, %98 ]
  %144 = getelementptr inbounds double, double* %57, i64 %62
  store double %143, double* %144, align 8, !tbaa !7
  %145 = icmp slt i64 %61, %59
  br i1 %145, label %60, label %146

146:                                              ; preds = %142, %41
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %46) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %43) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #17
  br label %147

147:                                              ; preds = %146, %39
  %148 = phi i32 [ %40, %39 ], [ %46, %146 ]
  call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %148) #17
  %149 = load i1, i1* @lastcol, align 4
  %150 = select i1 %149, i32 7000, i32 0
  %151 = load i1, i1* @firstcol, align 4
  %152 = zext i1 %151 to i32
  %153 = sub nsw i32 %150, %152
  %154 = icmp sgt i32 %153, -1
  br i1 %154, label %155, label %205

155:                                              ; preds = %147
  %156 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #17
  store i32 0, i32* %17, align 4, !tbaa !3
  %157 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %157) #17
  store i32 %153, i32* %18, align 4, !tbaa !3
  %158 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %158) #17
  store i32 1, i32* %19, align 4, !tbaa !3
  %159 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %159) #17
  store i32 0, i32* %20, align 4, !tbaa !3
  %160 = bitcast double* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %160) #17
  store double 0.000000e+00, double* %21, align 8, !tbaa !7
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %148, i32 34, i32* nonnull %20, i32* nonnull %17, i32* nonnull %18, i32* nonnull %19, i32 1, i32 1) #17
  %161 = load i32, i32* %18, align 4, !tbaa !3
  %162 = icmp sgt i32 %161, %153
  %163 = select i1 %162, i32 %153, i32 %161
  store i32 %163, i32* %18, align 4, !tbaa !3
  %164 = load i32, i32* %17, align 4, !tbaa !3
  %165 = icmp sgt i32 %164, %163
  br i1 %165, label %182, label %166

166:                                              ; preds = %155
  %167 = load double*, double** %4, align 8, !tbaa !9
  %168 = load double*, double** %6, align 8, !tbaa !9
  %169 = sext i32 %164 to i64
  %170 = sext i32 %163 to i64
  br label %171

171:                                              ; preds = %171, %166
  %172 = phi double [ %180, %171 ], [ 0.000000e+00, %166 ]
  %173 = phi i64 [ %174, %171 ], [ %169, %166 ]
  %174 = add nsw i64 %173, 1
  %175 = getelementptr inbounds double, double* %167, i64 %174
  %176 = load double, double* %175, align 8, !tbaa !7
  %177 = getelementptr inbounds double, double* %168, i64 %174
  %178 = load double, double* %177, align 8, !tbaa !7
  %179 = fmul double %176, %178
  %180 = fadd double %172, %179
  store double %180, double* %21, align 8, !tbaa !7
  %181 = icmp slt i64 %173, %170
  br i1 %181, label %171, label %182

182:                                              ; preds = %171, %155
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %148) #17
  %183 = bitcast [1 x i8*]* %22 to double**
  store double* %21, double** %183, align 8
  %184 = bitcast double** %183 to i8*
  call void @nk_carat_instrument_escapes(i8* %184)
  %185 = bitcast [1 x i8*]* %22 to i8*
  %186 = call i32 @__kmpc_reduce(%struct.ident_t* nonnull @2, i32 %148, i32 1, i64 8, i8* nonnull %185, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.35, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  switch i32 %186, label %204 [
    i32 1, label %187
    i32 2, label %191
  ]

187:                                              ; preds = %182
  %188 = load double, double* %7, align 8, !tbaa !7
  %189 = load double, double* %21, align 8, !tbaa !7
  %190 = fadd double %188, %189
  store double %190, double* %7, align 8, !tbaa !7
  br label %203

191:                                              ; preds = %182
  %192 = bitcast double* %7 to i64*
  %193 = load atomic i64, i64* %192 monotonic, align 8, !tbaa !7
  %194 = load double, double* %21, align 8, !tbaa !7
  br label %195

195:                                              ; preds = %195, %191
  %196 = phi i64 [ %193, %191 ], [ %201, %195 ]
  %197 = bitcast i64 %196 to double
  %198 = fadd double %194, %197
  %199 = bitcast double %198 to i64
  %200 = cmpxchg i64* %192, i64 %196, i64 %199 monotonic monotonic
  %201 = extractvalue { i64, i1 } %200, 0
  %202 = extractvalue { i64, i1 } %200, 1
  br i1 %202, label %203, label %195

203:                                              ; preds = %195, %187
  call void @__kmpc_end_reduce(%struct.ident_t* nonnull @2, i32 %148, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  br label %204

204:                                              ; preds = %203, %182
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %160) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %159) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %158) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %157) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #17
  br label %205

205:                                              ; preds = %204, %147
  call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %148) #17
  call void @__kmpc_barrier(%struct.ident_t* nonnull @4, i32 %148) #17
  %206 = load double, double* %8, align 8, !tbaa !7
  %207 = load double, double* %7, align 8, !tbaa !7
  %208 = fdiv double %206, %207
  %209 = load i1, i1* @lastcol, align 4
  %210 = select i1 %209, i32 7000, i32 0
  %211 = load i1, i1* @firstcol, align 4
  %212 = zext i1 %211 to i32
  %213 = sub nsw i32 %210, %212
  %214 = icmp sgt i32 %213, -1
  br i1 %214, label %215, label %275

215:                                              ; preds = %205
  %216 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %216) #17
  store i32 0, i32* %23, align 4, !tbaa !3
  %217 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %217) #17
  store i32 %213, i32* %24, align 4, !tbaa !3
  %218 = bitcast i32* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %218) #17
  store i32 1, i32* %25, align 4, !tbaa !3
  %219 = bitcast i32* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %219) #17
  store i32 0, i32* %26, align 4, !tbaa !3
  %220 = bitcast double* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #17
  store double 0.000000e+00, double* %27, align 8, !tbaa !7
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %148, i32 34, i32* nonnull %26, i32* nonnull %23, i32* nonnull %24, i32* nonnull %25, i32 1, i32 1) #17
  %221 = load i32, i32* %24, align 4, !tbaa !3
  %222 = icmp sgt i32 %221, %213
  %223 = select i1 %222, i32 %213, i32 %221
  store i32 %223, i32* %24, align 4, !tbaa !3
  %224 = load i32, i32* %23, align 4, !tbaa !3
  %225 = icmp sgt i32 %224, %223
  br i1 %225, label %252, label %226

226:                                              ; preds = %215
  %227 = load double*, double** %10, align 8, !tbaa !9
  %228 = load double*, double** %4, align 8, !tbaa !9
  %229 = load double*, double** %11, align 8, !tbaa !9
  %230 = load double*, double** %6, align 8, !tbaa !9
  %231 = sext i32 %224 to i64
  %232 = sext i32 %223 to i64
  br label %233

233:                                              ; preds = %233, %226
  %234 = phi i64 [ %235, %233 ], [ %231, %226 ]
  %235 = add nsw i64 %234, 1
  %236 = getelementptr inbounds double, double* %227, i64 %235
  %237 = load double, double* %236, align 8, !tbaa !7
  %238 = getelementptr inbounds double, double* %228, i64 %235
  %239 = load double, double* %238, align 8, !tbaa !7
  %240 = fmul double %208, %239
  %241 = fadd double %237, %240
  store double %241, double* %236, align 8, !tbaa !7
  %242 = getelementptr inbounds double, double* %229, i64 %235
  %243 = load double, double* %242, align 8, !tbaa !7
  %244 = getelementptr inbounds double, double* %230, i64 %235
  %245 = load double, double* %244, align 8, !tbaa !7
  %246 = fmul double %208, %245
  %247 = fsub double %243, %246
  store double %247, double* %242, align 8, !tbaa !7
  %248 = load double, double* %27, align 8, !tbaa !7
  %249 = fmul double %247, %247
  %250 = fadd double %248, %249
  store double %250, double* %27, align 8, !tbaa !7
  %251 = icmp slt i64 %234, %232
  br i1 %251, label %233, label %252

252:                                              ; preds = %233, %215
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %148) #17
  %253 = bitcast [1 x i8*]* %28 to double**
  store double* %27, double** %253, align 8
  %254 = bitcast double** %253 to i8*
  call void @nk_carat_instrument_escapes(i8* %254)
  %255 = bitcast [1 x i8*]* %28 to i8*
  %256 = call i32 @__kmpc_reduce(%struct.ident_t* nonnull @2, i32 %148, i32 1, i64 8, i8* nonnull %255, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.36, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  switch i32 %256, label %274 [
    i32 1, label %257
    i32 2, label %261
  ]

257:                                              ; preds = %252
  %258 = load double, double* %9, align 8, !tbaa !7
  %259 = load double, double* %27, align 8, !tbaa !7
  %260 = fadd double %258, %259
  store double %260, double* %9, align 8, !tbaa !7
  br label %273

261:                                              ; preds = %252
  %262 = bitcast double* %9 to i64*
  %263 = load atomic i64, i64* %262 monotonic, align 8, !tbaa !7
  %264 = load double, double* %27, align 8, !tbaa !7
  br label %265

265:                                              ; preds = %265, %261
  %266 = phi i64 [ %263, %261 ], [ %271, %265 ]
  %267 = bitcast i64 %266 to double
  %268 = fadd double %264, %267
  %269 = bitcast double %268 to i64
  %270 = cmpxchg i64* %262, i64 %266, i64 %269 monotonic monotonic
  %271 = extractvalue { i64, i1 } %270, 0
  %272 = extractvalue { i64, i1 } %270, 1
  br i1 %272, label %273, label %265

273:                                              ; preds = %265, %257
  call void @__kmpc_end_reduce(%struct.ident_t* nonnull @2, i32 %148, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  br label %274

274:                                              ; preds = %273, %252
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %219) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %218) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %217) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %216) #17
  br label %275

275:                                              ; preds = %274, %205
  call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %148) #17
  %276 = load double, double* %9, align 8, !tbaa !7
  %277 = load double, double* %8, align 8, !tbaa !7
  %278 = fdiv double %276, %277
  %279 = load i1, i1* @lastcol, align 4
  %280 = select i1 %279, i32 7000, i32 0
  %281 = load i1, i1* @firstcol, align 4
  %282 = zext i1 %281 to i32
  %283 = sub nsw i32 %280, %282
  %284 = icmp sgt i32 %283, -1
  br i1 %284, label %285, label %417

285:                                              ; preds = %275
  %286 = bitcast i32* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %286) #17
  store i32 0, i32* %29, align 4, !tbaa !3
  %287 = bitcast i32* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %287) #17
  store i32 %283, i32* %30, align 4, !tbaa !3
  %288 = bitcast i32* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %288) #17
  store i32 1, i32* %31, align 4, !tbaa !3
  %289 = bitcast i32* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %289) #17
  store i32 0, i32* %32, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %148, i32 34, i32* nonnull %32, i32* nonnull %29, i32* nonnull %30, i32* nonnull %31, i32 1, i32 1) #17
  %290 = load i32, i32* %30, align 4, !tbaa !3
  %291 = icmp sgt i32 %290, %283
  %292 = select i1 %291, i32 %283, i32 %290
  store i32 %292, i32* %30, align 4, !tbaa !3
  %293 = load i32, i32* %29, align 4, !tbaa !3
  %294 = icmp sgt i32 %293, %292
  br i1 %294, label %416, label %295

295:                                              ; preds = %285
  %296 = load double*, double** %11, align 8, !tbaa !9
  %297 = load double*, double** %4, align 8, !tbaa !9
  %298 = sext i32 %293 to i64
  %299 = sext i32 %292 to i64
  %300 = icmp sgt i64 %298, %299
  %301 = select i1 %300, i64 %298, i64 %299
  %302 = add nsw i64 %301, 1
  %303 = sub nsw i64 %302, %298
  %304 = icmp ult i64 %303, 4
  br i1 %304, label %404, label %305

305:                                              ; preds = %295
  %306 = add nsw i64 %298, 1
  %307 = getelementptr double, double* %297, i64 %306
  %308 = icmp sgt i64 %298, %299
  %309 = select i1 %308, i64 %298, i64 %299
  %310 = add nsw i64 %309, 2
  %311 = getelementptr double, double* %297, i64 %310
  %312 = getelementptr double, double* %296, i64 %306
  %313 = getelementptr double, double* %296, i64 %310
  %314 = icmp ult double* %307, %313
  %315 = icmp ult double* %312, %311
  %316 = and i1 %314, %315
  br i1 %316, label %404, label %317

317:                                              ; preds = %305
  %318 = and i64 %303, -4
  %319 = add nsw i64 %318, %298
  %320 = insertelement <2 x double> undef, double %278, i32 0
  %321 = shufflevector <2 x double> %320, <2 x double> undef, <2 x i32> zeroinitializer
  %322 = insertelement <2 x double> undef, double %278, i32 0
  %323 = shufflevector <2 x double> %322, <2 x double> undef, <2 x i32> zeroinitializer
  %324 = add nsw i64 %318, -4
  %325 = lshr exact i64 %324, 2
  %326 = add nuw nsw i64 %325, 1
  %327 = and i64 %326, 1
  %328 = icmp eq i64 %324, 0
  br i1 %328, label %378, label %329

329:                                              ; preds = %317
  %330 = sub nuw nsw i64 %326, %327
  br label %331

331:                                              ; preds = %331, %329
  %332 = phi i64 [ 0, %329 ], [ %375, %331 ]
  %333 = phi i64 [ %330, %329 ], [ %376, %331 ]
  %334 = add i64 %332, %298
  %335 = add nsw i64 %334, 1
  %336 = getelementptr inbounds double, double* %296, i64 %335
  %337 = bitcast double* %336 to <2 x double>*
  %338 = load <2 x double>, <2 x double>* %337, align 8, !tbaa !7, !alias.scope !47
  %339 = getelementptr inbounds double, double* %336, i64 2
  %340 = bitcast double* %339 to <2 x double>*
  %341 = load <2 x double>, <2 x double>* %340, align 8, !tbaa !7, !alias.scope !47
  %342 = getelementptr inbounds double, double* %297, i64 %335
  %343 = bitcast double* %342 to <2 x double>*
  %344 = load <2 x double>, <2 x double>* %343, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %345 = getelementptr inbounds double, double* %342, i64 2
  %346 = bitcast double* %345 to <2 x double>*
  %347 = load <2 x double>, <2 x double>* %346, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %348 = fmul <2 x double> %321, %344
  %349 = fmul <2 x double> %323, %347
  %350 = fadd <2 x double> %338, %348
  %351 = fadd <2 x double> %341, %349
  %352 = bitcast double* %342 to <2 x double>*
  store <2 x double> %350, <2 x double>* %352, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %353 = bitcast double* %345 to <2 x double>*
  store <2 x double> %351, <2 x double>* %353, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %354 = or i64 %332, 4
  %355 = add i64 %354, %298
  %356 = add nsw i64 %355, 1
  %357 = getelementptr inbounds double, double* %296, i64 %356
  %358 = bitcast double* %357 to <2 x double>*
  %359 = load <2 x double>, <2 x double>* %358, align 8, !tbaa !7, !alias.scope !47
  %360 = getelementptr inbounds double, double* %357, i64 2
  %361 = bitcast double* %360 to <2 x double>*
  %362 = load <2 x double>, <2 x double>* %361, align 8, !tbaa !7, !alias.scope !47
  %363 = getelementptr inbounds double, double* %297, i64 %356
  %364 = bitcast double* %363 to <2 x double>*
  %365 = load <2 x double>, <2 x double>* %364, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %366 = getelementptr inbounds double, double* %363, i64 2
  %367 = bitcast double* %366 to <2 x double>*
  %368 = load <2 x double>, <2 x double>* %367, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %369 = fmul <2 x double> %321, %365
  %370 = fmul <2 x double> %323, %368
  %371 = fadd <2 x double> %359, %369
  %372 = fadd <2 x double> %362, %370
  %373 = bitcast double* %363 to <2 x double>*
  store <2 x double> %371, <2 x double>* %373, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %374 = bitcast double* %366 to <2 x double>*
  store <2 x double> %372, <2 x double>* %374, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %375 = add i64 %332, 8
  %376 = add i64 %333, -2
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %378, label %331, !llvm.loop !52

378:                                              ; preds = %331, %317
  %379 = phi i64 [ 0, %317 ], [ %375, %331 ]
  %380 = icmp eq i64 %327, 0
  br i1 %380, label %402, label %381

381:                                              ; preds = %378
  %382 = add i64 %379, %298
  %383 = add nsw i64 %382, 1
  %384 = getelementptr inbounds double, double* %296, i64 %383
  %385 = bitcast double* %384 to <2 x double>*
  %386 = load <2 x double>, <2 x double>* %385, align 8, !tbaa !7, !alias.scope !47
  %387 = getelementptr inbounds double, double* %384, i64 2
  %388 = bitcast double* %387 to <2 x double>*
  %389 = load <2 x double>, <2 x double>* %388, align 8, !tbaa !7, !alias.scope !47
  %390 = getelementptr inbounds double, double* %297, i64 %383
  %391 = bitcast double* %390 to <2 x double>*
  %392 = load <2 x double>, <2 x double>* %391, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %393 = getelementptr inbounds double, double* %390, i64 2
  %394 = bitcast double* %393 to <2 x double>*
  %395 = load <2 x double>, <2 x double>* %394, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %396 = fmul <2 x double> %321, %392
  %397 = fmul <2 x double> %323, %395
  %398 = fadd <2 x double> %386, %396
  %399 = fadd <2 x double> %389, %397
  %400 = bitcast double* %390 to <2 x double>*
  store <2 x double> %398, <2 x double>* %400, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  %401 = bitcast double* %393 to <2 x double>*
  store <2 x double> %399, <2 x double>* %401, align 8, !tbaa !7, !alias.scope !50, !noalias !47
  br label %402

402:                                              ; preds = %381, %378
  %403 = icmp eq i64 %303, %318
  br i1 %403, label %416, label %404

404:                                              ; preds = %402, %305, %295
  %405 = phi i64 [ %298, %305 ], [ %298, %295 ], [ %319, %402 ]
  br label %406

406:                                              ; preds = %406, %404
  %407 = phi i64 [ %408, %406 ], [ %405, %404 ]
  %408 = add nsw i64 %407, 1
  %409 = getelementptr inbounds double, double* %296, i64 %408
  %410 = load double, double* %409, align 8, !tbaa !7
  %411 = getelementptr inbounds double, double* %297, i64 %408
  %412 = load double, double* %411, align 8, !tbaa !7
  %413 = fmul double %278, %412
  %414 = fadd double %410, %413
  store double %414, double* %411, align 8, !tbaa !7
  %415 = icmp slt i64 %407, %299
  br i1 %415, label %406, label %416, !llvm.loop !53

416:                                              ; preds = %406, %402, %285
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %148) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %289) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %288) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %287) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %286) #17
  br label %417

417:                                              ; preds = %416, %275
  %418 = load i32, i32* @conj_grad.callcount, align 4, !tbaa !3
  %419 = add nsw i32 %418, 1
  store i32 %419, i32* @conj_grad.callcount, align 4, !tbaa !3
  ret void
}

; Function Attrs: norecurse noredzone nounwind uwtable
define internal void @.omp_outlined..37(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture dereferenceable(4), i32** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), i32** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double* nocapture dereferenceable(8), double** nocapture readonly dereferenceable(8)) #4 {
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca double, align 8
  %20 = alloca [1 x i8*], align 8
  %21 = load i1, i1* @lastrow, align 4
  %22 = select i1 %21, i32 7000, i32 0
  %23 = load i1, i1* @firstrow, align 4
  %24 = zext i1 %23 to i32
  %25 = sub nsw i32 %22, %24
  %26 = icmp sgt i32 %25, -1
  br i1 %26, label %29, label %27

27:                                               ; preds = %10
  %28 = load i32, i32* %0, align 4, !tbaa !3
  br label %81

29:                                               ; preds = %10
  %30 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #17
  store i32 0, i32* %11, align 4, !tbaa !3
  %31 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #17
  store i32 %25, i32* %12, align 4, !tbaa !3
  %32 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #17
  store i32 1, i32* %13, align 4, !tbaa !3
  %33 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #17
  store i32 0, i32* %14, align 4, !tbaa !3
  %34 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %34, i32 34, i32* nonnull %14, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13, i32 1, i32 1) #17
  %35 = load i32, i32* %12, align 4, !tbaa !3
  %36 = icmp sgt i32 %35, %25
  %37 = select i1 %36, i32 %25, i32 %35
  store i32 %37, i32* %12, align 4, !tbaa !3
  %38 = load i32, i32* %11, align 4, !tbaa !3
  %39 = icmp sgt i32 %38, %37
  br i1 %39, label %80, label %40

40:                                               ; preds = %29
  %41 = load i32*, i32** %3, align 8, !tbaa !9
  %42 = load double*, double** %4, align 8
  %43 = load double*, double** %5, align 8
  %44 = load i32*, i32** %6, align 8
  %45 = load double*, double** %7, align 8, !tbaa !9
  %46 = sext i32 %38 to i64
  %47 = sext i32 %37 to i64
  br label %48

48:                                               ; preds = %76, %40
  %49 = phi i64 [ %50, %76 ], [ %46, %40 ]
  %50 = add nsw i64 %49, 1
  %51 = getelementptr inbounds i32, i32* %41, i64 %50
  %52 = load i32, i32* %51, align 4, !tbaa !3
  store i32 %52, i32* %2, align 4, !tbaa !3
  %53 = add nsw i64 %49, 2
  %54 = getelementptr inbounds i32, i32* %41, i64 %53
  %55 = load i32, i32* %54, align 4, !tbaa !3
  %56 = icmp slt i32 %52, %55
  br i1 %56, label %57, label %76

57:                                               ; preds = %48
  %58 = sext i32 %52 to i64
  br label %59

59:                                               ; preds = %59, %57
  %60 = phi i64 [ %58, %57 ], [ %71, %59 ]
  %61 = phi double [ 0.000000e+00, %57 ], [ %70, %59 ]
  %62 = getelementptr inbounds double, double* %42, i64 %60
  %63 = load double, double* %62, align 8, !tbaa !7
  %64 = getelementptr inbounds i32, i32* %44, i64 %60
  %65 = load i32, i32* %64, align 4, !tbaa !3
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds double, double* %43, i64 %66
  %68 = load double, double* %67, align 8, !tbaa !7
  %69 = fmul double %63, %68
  %70 = fadd double %61, %69
  %71 = add nsw i64 %60, 1
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %2, align 4, !tbaa !3
  %73 = load i32, i32* %54, align 4, !tbaa !3
  %74 = sext i32 %73 to i64
  %75 = icmp slt i64 %71, %74
  br i1 %75, label %59, label %76

76:                                               ; preds = %59, %48
  %77 = phi double [ 0.000000e+00, %48 ], [ %70, %59 ]
  %78 = getelementptr inbounds double, double* %45, i64 %50
  store double %77, double* %78, align 8, !tbaa !7
  %79 = icmp slt i64 %49, %47
  br i1 %79, label %48, label %80

80:                                               ; preds = %76, %29
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %34) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #17
  br label %81

81:                                               ; preds = %80, %27
  %82 = phi i32 [ %28, %27 ], [ %34, %80 ]
  call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %82) #17
  %83 = load i1, i1* @lastcol, align 4
  %84 = select i1 %83, i32 7000, i32 0
  %85 = load i1, i1* @firstcol, align 4
  %86 = zext i1 %85 to i32
  %87 = sub nsw i32 %84, %86
  %88 = icmp sgt i32 %87, -1
  br i1 %88, label %89, label %140

89:                                               ; preds = %81
  %90 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %90) #17
  store i32 0, i32* %15, align 4, !tbaa !3
  %91 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %91) #17
  store i32 %87, i32* %16, align 4, !tbaa !3
  %92 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %92) #17
  store i32 1, i32* %17, align 4, !tbaa !3
  %93 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93) #17
  store i32 0, i32* %18, align 4, !tbaa !3
  %94 = bitcast double* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #17
  store double 0.000000e+00, double* %19, align 8, !tbaa !7
  call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %82, i32 34, i32* nonnull %18, i32* nonnull %15, i32* nonnull %16, i32* nonnull %17, i32 1, i32 1) #17
  %95 = load i32, i32* %16, align 4, !tbaa !3
  %96 = icmp sgt i32 %95, %87
  %97 = select i1 %96, i32 %87, i32 %95
  store i32 %97, i32* %16, align 4, !tbaa !3
  %98 = load i32, i32* %15, align 4, !tbaa !3
  %99 = icmp sgt i32 %98, %97
  br i1 %99, label %117, label %100

100:                                              ; preds = %89
  %101 = load double*, double** %9, align 8, !tbaa !9
  %102 = load double*, double** %7, align 8, !tbaa !9
  %103 = sext i32 %98 to i64
  %104 = sext i32 %97 to i64
  br label %105

105:                                              ; preds = %105, %100
  %106 = phi double [ %115, %105 ], [ 0.000000e+00, %100 ]
  %107 = phi i64 [ %108, %105 ], [ %103, %100 ]
  %108 = add nsw i64 %107, 1
  %109 = getelementptr inbounds double, double* %101, i64 %108
  %110 = load double, double* %109, align 8, !tbaa !7
  %111 = getelementptr inbounds double, double* %102, i64 %108
  %112 = load double, double* %111, align 8, !tbaa !7
  %113 = fsub double %110, %112
  %114 = fmul double %113, %113
  %115 = fadd double %106, %114
  store double %115, double* %19, align 8, !tbaa !7
  %116 = icmp slt i64 %107, %104
  br i1 %116, label %105, label %117

117:                                              ; preds = %105, %89
  call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %82) #17
  %118 = bitcast [1 x i8*]* %20 to double**
  store double* %19, double** %118, align 8
  %119 = bitcast double** %118 to i8*
  call void @nk_carat_instrument_escapes(i8* %119)
  %120 = bitcast [1 x i8*]* %20 to i8*
  %121 = call i32 @__kmpc_reduce(%struct.ident_t* nonnull @2, i32 %82, i32 1, i64 8, i8* nonnull %120, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.38, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  switch i32 %121, label %139 [
    i32 1, label %122
    i32 2, label %126
  ]

122:                                              ; preds = %117
  %123 = load double, double* %8, align 8, !tbaa !7
  %124 = load double, double* %19, align 8, !tbaa !7
  %125 = fadd double %123, %124
  store double %125, double* %8, align 8, !tbaa !7
  br label %138

126:                                              ; preds = %117
  %127 = bitcast double* %8 to i64*
  %128 = load atomic i64, i64* %127 monotonic, align 8, !tbaa !7
  %129 = load double, double* %19, align 8, !tbaa !7
  br label %130

130:                                              ; preds = %130, %126
  %131 = phi i64 [ %128, %126 ], [ %136, %130 ]
  %132 = bitcast i64 %131 to double
  %133 = fadd double %129, %132
  %134 = bitcast double %133 to i64
  %135 = cmpxchg i64* %127, i64 %131, i64 %134 monotonic monotonic
  %136 = extractvalue { i64, i1 } %135, 0
  %137 = extractvalue { i64, i1 } %135, 1
  br i1 %137, label %138, label %130

138:                                              ; preds = %130, %122
  call void @__kmpc_end_reduce(%struct.ident_t* nonnull @2, i32 %82, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #17
  br label %139

139:                                              ; preds = %138, %117
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %91) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #17
  br label %140

140:                                              ; preds = %139, %81
  call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %82) #17
  ret void
}

declare void @__kmpc_barrier(%struct.ident_t*, i32) local_unnamed_addr

; Function Attrs: nofree norecurse noredzone nounwind uwtable
define internal void @.omp.reduction.reduction_func.38(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to double**
  %4 = load double*, double** %3, align 8
  %5 = bitcast i8* %0 to double**
  %6 = load double*, double** %5, align 8
  %7 = load double, double* %6, align 8, !tbaa !7
  %8 = load double, double* %4, align 8, !tbaa !7
  %9 = fadd double %7, %8
  store double %9, double* %6, align 8, !tbaa !7
  ret void
}

declare i32 @__kmpc_reduce(%struct.ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_end_reduce(%struct.ident_t*, i32, [8 x i32]*) local_unnamed_addr

; Function Attrs: nofree norecurse noredzone nounwind uwtable
define internal void @.omp.reduction.reduction_func.35(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to double**
  %4 = load double*, double** %3, align 8
  %5 = bitcast i8* %0 to double**
  %6 = load double*, double** %5, align 8
  %7 = load double, double* %6, align 8, !tbaa !7
  %8 = load double, double* %4, align 8, !tbaa !7
  %9 = fadd double %7, %8
  store double %9, double* %6, align 8, !tbaa !7
  ret void
}

; Function Attrs: nofree norecurse noredzone nounwind uwtable
define internal void @.omp.reduction.reduction_func.36(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to double**
  %4 = load double*, double** %3, align 8
  %5 = bitcast i8* %0 to double**
  %6 = load double*, double** %5, align 8
  %7 = load double, double* %6, align 8, !tbaa !7
  %8 = load double, double* %4, align 8, !tbaa !7
  %9 = fadd double %7, %8
  store double %9, double* %6, align 8, !tbaa !7
  ret void
}

; Function Attrs: nofree norecurse noredzone nounwind uwtable
define internal void @.omp.reduction.reduction_func.33(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to double**
  %4 = load double*, double** %3, align 8
  %5 = bitcast i8* %0 to double**
  %6 = load double*, double** %5, align 8
  %7 = load double, double* %6, align 8, !tbaa !7
  %8 = load double, double* %4, align 8, !tbaa !7
  %9 = fadd double %7, %8
  store double %9, double* %6, align 8, !tbaa !7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree noredzone nounwind uwtable
define void @c_print_results(i8*, i8 signext, i32, i32, i32, i32, i32, double, double, i8*, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*) local_unnamed_addr #9 {
  %21 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.3, i64 0, i64 0), i8* %0) #18
  %22 = sext i8 %1 to i32
  %23 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2.4, i64 0, i64 0), i32 %22) #18
  %24 = or i32 %4, %3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3.5, i64 0, i64 0), i32 %2) #18
  br label %30

28:                                               ; preds = %20
  %29 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0), i32 %2, i32 %3, i32 %4) #18
  br label %30

30:                                               ; preds = %28, %26
  %31 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i32 %5) #18
  %32 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i32 %6) #18
  %33 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0), double %7) #18
  %34 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), double %8) #18
  %35 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i8* %9) #18
  %36 = icmp eq i32 %10, 0
  %37 = select i1 %36, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str.6, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str.23, i64 0, i64 0)
  %38 = tail call i32 @puts(i8* %37)
  %39 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i64 0, i64 0), i8* %11) #18
  %40 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0), i8* %12) #18
  %41 = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.22, i64 0, i64 0))
  %42 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15.7, i64 0, i64 0), i8* %13) #18
  %43 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16.8, i64 0, i64 0), i8* %14) #18
  %44 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* %15) #18
  %45 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18.9, i64 0, i64 0), i8* %16) #18
  %46 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19.10, i64 0, i64 0), i8* %17) #18
  %47 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0), i8* %18) #18
  %48 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i64 0, i64 0), i8* %19) #18
  ret void
}

; Function Attrs: nofree norecurse noredzone nounwind uwtable
define double @randlc(double* nocapture, double) local_unnamed_addr #8 {
  %3 = fmul double %1, 0x3E80000000000000
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x4160000000000000
  %7 = fsub double %1, %6
  %8 = load double, double* %0, align 8, !tbaa !7
  %9 = fmul double %8, 0x3E80000000000000
  %10 = fptosi double %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = fmul double %11, 0x4160000000000000
  %13 = fsub double %8, %12
  %14 = fmul double %13, %5
  %15 = fmul double %7, %11
  %16 = fadd double %15, %14
  %17 = fmul double %16, 0x3E80000000000000
  %18 = fptosi double %17 to i32
  %19 = sitofp i32 %18 to double
  %20 = fmul double %19, 0x4160000000000000
  %21 = fsub double %16, %20
  %22 = fmul double %21, 0x4160000000000000
  %23 = fmul double %7, %13
  %24 = fadd double %23, %22
  %25 = fmul double %24, 0x3D10000000000000
  %26 = fptosi double %25 to i32
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 0x42D0000000000000
  %29 = fsub double %24, %28
  store double %29, double* %0, align 8, !tbaa !7
  %30 = fmul double %29, 0x3D10000000000000
  ret double %30
}

; Function Attrs: nofree norecurse noredzone nounwind uwtable
define void @vranlc(i32, double* nocapture, double, double* nocapture) local_unnamed_addr #8 {
  %5 = fmul double %2, 0x3E80000000000000
  %6 = fptosi double %5 to i32
  %7 = sitofp i32 %6 to double
  %8 = fmul double %7, 0x4160000000000000
  %9 = fsub double %2, %8
  %10 = load double, double* %1, align 8, !tbaa !7
  %11 = icmp slt i32 %0, 1
  br i1 %11, label %43, label %12

12:                                               ; preds = %4
  %13 = add nuw i32 %0, 1
  %14 = zext i32 %13 to i64
  br label %15

15:                                               ; preds = %15, %12
  %16 = phi i64 [ 1, %12 ], [ %41, %15 ]
  %17 = phi double [ %10, %12 ], [ %38, %15 ]
  %18 = fmul double %17, 0x3E80000000000000
  %19 = fptosi double %18 to i32
  %20 = sitofp i32 %19 to double
  %21 = fmul double %20, 0x4160000000000000
  %22 = fsub double %17, %21
  %23 = fmul double %22, %7
  %24 = fmul double %9, %20
  %25 = fadd double %24, %23
  %26 = fmul double %25, 0x3E80000000000000
  %27 = fptosi double %26 to i32
  %28 = sitofp i32 %27 to double
  %29 = fmul double %28, 0x4160000000000000
  %30 = fsub double %25, %29
  %31 = fmul double %30, 0x4160000000000000
  %32 = fmul double %9, %22
  %33 = fadd double %32, %31
  %34 = fmul double %33, 0x3D10000000000000
  %35 = fptosi double %34 to i32
  %36 = sitofp i32 %35 to double
  %37 = fmul double %36, 0x42D0000000000000
  %38 = fsub double %33, %37
  %39 = fmul double %38, 0x3D10000000000000
  %40 = getelementptr inbounds double, double* %3, i64 %16
  store double %39, double* %40, align 8, !tbaa !7
  %41 = add nuw nsw i64 %16, 1
  %42 = icmp eq i64 %41, %14
  br i1 %42, label %43, label %15

43:                                               ; preds = %15, %4
  %44 = phi double [ %10, %4 ], [ %38, %15 ]
  store double %44, double* %1, align 8, !tbaa !7
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define double @elapsed_time() local_unnamed_addr #0 {
  %1 = alloca double, align 8
  %2 = bitcast double* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #17
  call void @wtime_(double* nonnull %1) #19
  %3 = load double, double* %1, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #17
  ret double %3
}

; Function Attrs: nofree norecurse noredzone nounwind uwtable writeonly
define void @timer_clear(i32) local_unnamed_addr #10 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %2
  store double 0.000000e+00, double* %3, align 8, !tbaa !7
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @timer_start(i32) local_unnamed_addr #0 {
  %2 = alloca double, align 8
  %3 = bitcast double* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #17
  call void @wtime_(double* nonnull %2) #19
  %4 = bitcast double* %2 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #17
  %6 = sext i32 %0 to i64
  %7 = getelementptr inbounds [64 x double], [64 x double]* @start, i64 0, i64 %6
  %8 = bitcast double* %7 to i64*
  store i64 %5, i64* %8, align 8, !tbaa !7
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @timer_stop(i32) local_unnamed_addr #0 {
  %2 = alloca double, align 8
  %3 = bitcast double* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #17
  call void @wtime_(double* nonnull %2) #19
  %4 = load double, double* %2, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #17
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [64 x double], [64 x double]* @start, i64 0, i64 %5
  %7 = load double, double* %6, align 8, !tbaa !7
  %8 = fsub double %4, %7
  %9 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %5
  %10 = load double, double* %9, align 8, !tbaa !7
  %11 = fadd double %10, %8
  store double %11, double* %9, align 8, !tbaa !7
  ret void
}

; Function Attrs: norecurse noredzone nounwind readonly uwtable
define double @timer_read(i32) local_unnamed_addr #11 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %2
  %4 = load double, double* %3, align 8, !tbaa !7
  ret double %4
}

; Function Attrs: noredzone nounwind uwtable
define void @wtime_(double* nocapture) local_unnamed_addr #0 {
  %2 = alloca %struct.timeval, align 8
  %3 = bitcast %struct.timeval* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #17
  %4 = call i32 @gettimeofday(%struct.timeval* nonnull %2, %struct.timezone* null) #19
  %5 = load i32, i32* @wtime_.sec, align 4, !tbaa !3
  %6 = icmp slt i32 %5, 0
  %7 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !54
  br i1 %6, label %9, label %11

9:                                                ; preds = %1
  %10 = trunc i64 %8 to i32
  store i32 %10, i32* @wtime_.sec, align 4, !tbaa !3
  br label %11

11:                                               ; preds = %9, %1
  %12 = phi i32 [ %10, %9 ], [ %5, %1 ]
  %13 = sext i32 %12 to i64
  %14 = sub nsw i64 %8, %13
  %15 = sitofp i64 %14 to double
  %16 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 1
  %17 = load i64, i64* %16, align 8, !tbaa !57
  %18 = sitofp i64 %17 to double
  %19 = fmul double %18, 0x3EB0C6F7A0B5ED8D
  %20 = fadd double %19, %15
  store double %20, double* %0, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #17
  ret void
}

; Function Attrs: nofree noredzone nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, %struct.timezone* nocapture) local_unnamed_addr #3

; Function Attrs: nofree noredzone nounwind uwtable
define void @_Unwind_Resume() local_unnamed_addr #9 {
  %1 = tail call i32 @puts(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str.24, i64 0, i64 0))
  ret void
}

; Function Attrs: norecurse noredzone nounwind readnone uwtable
define void @_Unwind_GetCFA() local_unnamed_addr #12 {
  ret void
}

; Function Attrs: norecurse noredzone nounwind readnone uwtable
define void @_Unwind_ForcedUnwind() local_unnamed_addr #12 {
  ret void
}

; Function Attrs: nofree noredzone nounwind uwtable
define double @__unordtf2() local_unnamed_addr #9 {
  %1 = tail call i32 @puts(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str.3, i64 0, i64 0))
  ret double 0.000000e+00
}

; Function Attrs: nofree noredzone nounwind uwtable
define void @__letf2() local_unnamed_addr #9 {
  %1 = tail call i32 @puts(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.4, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline noredzone nounwind uwtable
define void @kmem_sys_free(i8* nocapture) #13 {
  tail call void @free(i8* %0) #19
  ret void
}

; Function Attrs: nofree noinline noredzone nounwind uwtable
define noalias i8* @_kmem_sys_malloc(i64) #14 {
  %2 = tail call noalias i8* @malloc(i64 %0) #19
  ret i8* %2
}

; Function Attrs: noinline noredzone nounwind optnone uwtable
define void @make_carat_pass_work() #15 {
  ret void
}

; Function Attrs: nofree noredzone nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: noredzone nounwind
declare void @free(i8* nocapture) local_unnamed_addr #16

; Function Attrs: noredzone nounwind uwtable
define void @__nk_exec_entry(i8* nocapture readonly, i8** nocapture readnone, i8* (...)**) local_unnamed_addr #0 {
  store i8* (...)** %2, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  call void @nk_carat_instrument_escapes(i8* bitcast (i8* (...)*** @__nk_func_table to i8*))
  %4 = getelementptr inbounds i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !58
  %7 = sext i32 %6 to i64
  %8 = bitcast i8* %0 to i8***
  %9 = load i8**, i8*** %8, align 8, !tbaa !60
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to i8***
  %12 = load i8**, i8*** %11, align 8, !tbaa !61
  tail call void asm sideeffect "pushq $$0\0Amov $$0, %rax\0Ank_loader_crt_env_loop:\0Amov ($2, %rax, 8), %rcx\0Acmpq $$0, %rcx\0Aje nk_loader_crt_env_loop_done\0Apushq %rcx\0Ainc %rax\0Aje nk_loader_crt_env_loop_done\0Ank_loader_crt_env_loop_done:\0Apushq $$0\0Atest $0, $0\0Aje nk_loader_crt_arg_loop_done\0Amov $0, %rax\0Adec %rax\0A\0Ank_loader_crt_arg_loop:\0Apushq ($1, %rax, 8)\0Adec %rax\0Acmpq $$0, %rax\0Ajge nk_loader_crt_arg_loop\0Ank_loader_crt_arg_loop_done:\0Apushq $0\0Amovq $$0, %rdx\0Ajmp _start\0A", "r,r,r,~{rax},~{rcx},~{dirflag},~{fpsr},~{flags}"(i64 %7, i8** %9, i8** %12) #17, !srcloc !62
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define i8* @nk_func_table_access(i32, i8*, i8*) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  store volatile i32 %0, i32* %4, align 4, !tbaa !3
  %5 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %6 = load volatile i32, i32* %4, align 4, !tbaa !3
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i8* (...)*, i8* (...)** %5, i64 %7
  %9 = bitcast i8* (...)** %8 to i8* (i8*, i8*, ...)**
  %10 = load i8* (i8*, i8*, ...)*, i8* (i8*, i8*, ...)** %9, align 8, !tbaa !9
  %11 = tail call i8* (i8*, i8*, ...) %10(i8* %1, i8* %2) #19
  ret i8* %11
}

; Function Attrs: noredzone nounwind uwtable
define void @nk_carat_instrument_global(i8*, i64, i64) local_unnamed_addr #0 {
  %4 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %5 = getelementptr inbounds i8* (...)*, i8* (...)** %4, i64 5
  %6 = bitcast i8* (...)** %5 to i8* (i8*, i64, i64, ...)**
  %7 = load i8* (i8*, i64, i64, ...)*, i8* (i8*, i64, i64, ...)** %6, align 8, !tbaa !9
  %8 = tail call i8* (i8*, i64, i64, ...) %7(i8* %0, i64 %1, i64 %2) #19
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @nk_carat_instrument_malloc(i8*, i64) local_unnamed_addr #0 {
  %3 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %4 = getelementptr inbounds i8* (...)*, i8* (...)** %3, i64 1
  %5 = bitcast i8* (...)** %4 to i8* (i8*, i64, ...)**
  %6 = load i8* (i8*, i64, ...)*, i8* (i8*, i64, ...)** %5, align 8, !tbaa !9
  %7 = tail call i8* (i8*, i64, ...) %6(i8* %0, i64 %1) #19
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @nk_carat_instrument_calloc(i8*, i64) local_unnamed_addr #0 {
  %3 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %4 = getelementptr inbounds i8* (...)*, i8* (...)** %3, i64 6
  %5 = bitcast i8* (...)** %4 to i8* (i8*, i64, ...)**
  %6 = load i8* (i8*, i64, ...)*, i8* (i8*, i64, ...)** %5, align 8, !tbaa !9
  %7 = tail call i8* (i8*, i64, ...) %6(i8* %0, i64 %1) #19
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @nk_carat_instrument_realloc(i8*, i64) local_unnamed_addr #0 {
  %3 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %4 = getelementptr inbounds i8* (...)*, i8* (...)** %3, i64 7
  %5 = bitcast i8* (...)** %4 to i8* (i8*, i64, ...)**
  %6 = load i8* (i8*, i64, ...)*, i8* (i8*, i64, ...)** %5, align 8, !tbaa !9
  %7 = tail call i8* (i8*, i64, ...) %6(i8* %0, i64 %1) #19
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @nk_carat_instrument_free(i8*) local_unnamed_addr #0 {
  %2 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %3 = getelementptr inbounds i8* (...)*, i8* (...)** %2, i64 2
  %4 = bitcast i8* (...)** %3 to i8* (i8*, ...)**
  %5 = load i8* (i8*, ...)*, i8* (i8*, ...)** %4, align 8, !tbaa !9
  %6 = tail call i8* (i8*, ...) %5(i8* %0) #19
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @nk_carat_instrument_escapes(i8*) local_unnamed_addr #0 {
  %2 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %3 = getelementptr inbounds i8* (...)*, i8* (...)** %2, i64 3
  %4 = bitcast i8* (...)** %3 to i8* (i8*, ...)**
  %5 = load i8* (i8*, ...)*, i8* (i8*, ...)** %4, align 8, !tbaa !9
  %6 = tail call i8* (i8*, ...) %5(i8* %0) #19
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @_nk_carat_globals_compiler_target() local_unnamed_addr #0 {
  %1 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %2 = getelementptr inbounds i8* (...)*, i8* (...)** %1, i64 8
  %3 = load i8* (...)*, i8* (...)** %2, align 8, !tbaa !9
  %4 = tail call i8* (...) %3() #19
  call void @nk_carat_instrument_global(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__NAUT_SIGNATURE, i32 0, i32 0), i64 16, i64 23)
  call void @nk_carat_instrument_global(i8* bitcast (i32* @wtime_.sec to i8*), i64 4, i64 22)
  call void @nk_carat_instrument_global(i8* bitcast (i32* @conj_grad.callcount to i8*), i64 4, i64 21)
  call void @nk_carat_instrument_global(i8* bitcast ([7003 x double]* @r to i8*), i64 56024, i64 20)
  call void @nk_carat_instrument_global(i8* bitcast ([7003 x double]* @p to i8*), i64 56024, i64 18)
  call void @nk_carat_instrument_global(i8* bitcast ([7003 x double]* @x to i8*), i64 56024, i64 16)
  call void @nk_carat_instrument_global(i8* bitcast (i1* @firstcol to i8*), i64 1, i64 2)
  call void @nk_carat_instrument_global(i8* bitcast ([7002 x double]* @v to i8*), i64 56016, i64 9)
  call void @nk_carat_instrument_global(i8* bitcast (i1* @lastcol to i8*), i64 1, i64 3)
  call void @nk_carat_instrument_global(i8* bitcast (i1* @lastrow to i8*), i64 1, i64 1)
  call void @nk_carat_instrument_global(i8* bitcast ([637001 x i32]* @arow to i8*), i64 2548004, i64 12)
  call void @nk_carat_instrument_global(i8* bitcast ([7003 x double]* @z to i8*), i64 56024, i64 17)
  call void @nk_carat_instrument_global(i8* bitcast (i1* @naa to i8*), i64 1, i64 4)
  call void @nk_carat_instrument_global(i8* bitcast (i1* @firstrow to i8*), i64 1, i64 0)
  call void @nk_carat_instrument_global(i8* bitcast ([7002 x i32]* @rowstr to i8*), i64 28008, i64 15)
  call void @nk_carat_instrument_global(i8* bitcast (double* @tran to i8*), i64 8, i64 6)
  call void @nk_carat_instrument_global(i8* bitcast ([637001 x i32]* @colidx to i8*), i64 2548004, i64 8)
  call void @nk_carat_instrument_global(i8* bitcast ([7003 x double]* @q to i8*), i64 56024, i64 19)
  call void @nk_carat_instrument_global(i8* bitcast (i1* @nzz to i8*), i64 1, i64 5)
  call void @nk_carat_instrument_global(i8* bitcast (double* @amult to i8*), i64 8, i64 7)
  call void @nk_carat_instrument_global(i8* bitcast ([14002 x i32]* @iv to i8*), i64 56008, i64 10)
  call void @nk_carat_instrument_global(i8* bitcast ([637001 x i32]* @acol to i8*), i64 2548004, i64 11)
  call void @nk_carat_instrument_global(i8* bitcast ([637001 x double]* @aelt to i8*), i64 5096008, i64 13)
  call void @nk_carat_instrument_global(i8* bitcast ([637001 x double]* @a to i8*), i64 5096008, i64 14)
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define void @nk_carat_init() local_unnamed_addr #0 {
  %1 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %2 = getelementptr inbounds i8* (...)*, i8* (...)** %1, i64 9
  %3 = load i8* (...)*, i8* (...)** %2, align 8, !tbaa !9
  %4 = tail call i8* (...) %3() #19
  ret void
}

; Function Attrs: noredzone nounwind uwtable
define i32 @nk_carat_check_protection(i8*, i32) local_unnamed_addr #0 {
  %3 = load i8* (...)**, i8* (...)*** @__nk_func_table, align 8, !tbaa !9
  %4 = getelementptr inbounds i8* (...)*, i8* (...)** %3, i64 4
  %5 = bitcast i8* (...)** %4 to i8* (i8*, i32, ...)**
  %6 = load i8* (i8*, i32, ...)*, i8* (i8*, i32, ...)** %5, align 8, !tbaa !9
  %7 = tail call i8* (i8*, i32, ...) %6(i8* %0, i32 %1) #19
  %8 = ptrtoint i8* %7 to i64
  %9 = trunc i64 %8 to i32
  ret i32 %9
}

attributes #0 = { noredzone nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind }
attributes #3 = { nofree noredzone nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse noredzone nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noredzone noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noredzone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse noredzone nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree noredzone nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree norecurse noredzone nounwind uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { norecurse noredzone nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { norecurse noredzone nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline noredzone nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nofree noinline noredzone nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noinline noredzone nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { noredzone nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind }
attributes #18 = { noredzone }
attributes #19 = { noredzone nounwind }
attributes #20 = { noredzone noreturn nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 9.0.0 (git@github.com:scampanoni/LLVM_installer.git 713d2f6594d9a0b77e7f9a120aaa7c917715a640)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"any pointer", !5, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !12}
!14 = !{!15}
!15 = !{i64 2, i64 -1, i64 -1, i1 true}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !19, !17}
!19 = !{!"llvm.loop.unroll.runtime.disable"}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !12}
!22 = distinct !{!22, !19, !17}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = !{!29}
!29 = distinct !{!29, !25}
!30 = !{!24, !27}
!31 = distinct !{!31, !17}
!32 = distinct !{!32, !17}
!33 = distinct !{!33, !17}
!34 = distinct !{!34, !12}
!35 = distinct !{!35, !19, !17}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = !{!42}
!42 = distinct !{!42, !38}
!43 = !{!37, !40}
!44 = distinct !{!44, !17}
!45 = distinct !{!45, !17}
!46 = distinct !{!46, !12}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !17}
!53 = distinct !{!53, !17}
!54 = !{!55, !56, i64 0}
!55 = !{!"timeval", !56, i64 0, !56, i64 8}
!56 = !{!"long", !5, i64 0}
!57 = !{!55, !56, i64 8}
!58 = !{!59, !4, i64 16}
!59 = !{!"nk_crt_proc_args", !10, i64 0, !10, i64 8, !4, i64 16}
!60 = !{!59, !10, i64 0}
!61 = !{!59, !10, i64 8}
!62 = !{i32 480, i32 524, i32 576, i32 612, i32 697, i32 775, i32 818, i32 874, i32 896, i32 939, i32 980, i32 1023, i32 1047, i32 1090, i32 1116, i32 1138, i32 1151, i32 1187, i32 1247, i32 1269, i32 1296, i32 1335, i32 1376, i32 1408, i32 1607}
